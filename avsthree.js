// Licensed by Advanced Visual Systems Inc. to You under the Apache License, Version 2.0.
import*as THREE from"three";var REVISION="1",DEFAULT_VIEWER_WIDTH=400,DEFAULT_VIEWER_HEIGHT=400,RAYCASTER_LINE_PRECISION=.03,PickDepthEnum={All:0,Closest:1},PickTypeEnum={Ray:0,Rectangle:1},PickLevelEnum={Cell:0,CellSet:1,SceneNode:2},CellTypeEnum={Points:1,Lines:2,Triangles:3,Quads:4};function FileLoader(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager}Object.assign(FileLoader.prototype,{load:function(e,t,r,n,i){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var a=this,o=THREE.Cache.get(e);if(void 0!==o)return a.manager.itemStart(e),setTimeout(function(){t&&t(o),a.manager.itemEnd(e)},0),o;var s=e.match(/^data:(.*?)(;base64)?,(.*)$/);if(s){var l=s[1],c=!!s[2],d=s[3];d=window.decodeURIComponent(d),c&&(d=window.atob(d));try{var h,u=(this.responseType||"").toLowerCase();switch(u){case"arraybuffer":case"blob":for(var p=new Uint8Array(d.length),f=0;f<d.length;f++)p[f]=d.charCodeAt(f);h="blob"===u?new Blob([p.buffer],{type:l}):p.buffer;break;case"document":var m=new DOMParser;h=m.parseFromString(d,l);break;case"json":h=JSON.parse(d);break;default:h=d}window.setTimeout(function(){t&&t(h),a.manager.itemEnd(e)},0)}catch(t){window.setTimeout(function(){n&&n(t),a.manager.itemEnd(e),a.manager.itemError(e)},0)}}else{var g=new XMLHttpRequest;for(var v in void 0===i?g.open("GET",e,!0):g.open("POST",e,!0),g.addEventListener("load",function(r){var i=this.response;THREE.Cache.add(e,i),200===this.status||0===this.status?(0===this.status&&console.warn("AVS.Three.FileLoader: HTTP Status 0 received."),t&&t(i),a.manager.itemEnd(e)):(n&&n(r),a.manager.itemEnd(e),a.manager.itemError(e))},!1),g.addEventListener("progress",function(e){r&&r(e)},!1),g.addEventListener("error",function(t){n&&n(t),a.manager.itemEnd(e),a.manager.itemError(e)},!1),void 0!==this.responseType&&(g.responseType=this.responseType),void 0!==this.withCredentials&&(g.withCredentials=this.withCredentials),g.overrideMimeType&&g.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)g.setRequestHeader(v,this.requestHeader[v]);g.send(JSON.stringify(i))}return a.manager.itemStart(e),g},setPath:function(e){return this.path=e,this},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}});var UniformsLib={pick:{pickState:{value:new Float32Array(1)},startCell:{value:0}},line:{linePattern:{value:65535},resolution:{value:new THREE.Vector2(1,1)}},thick:{linewidth:{value:1}},mesh:{stipple:{value:0},stippleColor:{value:new THREE.Color(0)},stipplePattern:{value:new Float32Array(64)}}},points_frag="\r\n\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float pickState[ 1 ];\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <map_particle_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tgl_FragColor = vec4( pickColor, 1.0 );\r\n\r\n\t} else {\r\n\r\n\tvec3 outgoingLight = vec3( 0.0 );\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_particle_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphatest_fragment>\r\n\r\n\toutgoingLight = diffuseColor.rgb;\r\n\r\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <encodings_fragment>\r\n\t#include <fog_fragment>\r\n\r\n\t}\r\n\r\n}\r\n",points_vert="\r\n\r\nattribute float cellCount;\r\n\r\nuniform float size;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <color_vertex>\r\n\t#include <begin_vertex>\r\n\t#include <project_vertex>\r\n\r\n\tgl_PointSize = size;\r\n\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <worldpos_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n",line_frag="\r\n\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float linePattern;\r\n\r\nuniform float pickState[ 1 ];\r\n\r\nvarying vec3 pickColor;\r\n\r\n#ifdef USE_PATTERN\r\nvarying float vPattern;\r\n#endif\r\nvarying float vDistance;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tgl_FragColor = vec4( pickColor, 1.0 );\r\n\r\n\t} else {\r\n\r\n\tfloat pattern;\r\n#ifdef USE_PATTERN\r\n\tpattern = floor( vPattern ); // Geometry (cell) line pattern\r\n#else\r\n\tpattern = linePattern; // Uniform line pattern\r\n#endif\r\n\r\n\tfloat shift = pow( 2.0, floor( mod( vDistance, 16.0 ) ) );\r\n\r\n\tif( mod( floor( pattern / shift ), 2.0 ) < 0.5 ) {\r\n\t\tdiscard;\r\n\t}\r\n\r\n\tvec3 outgoingLight = vec3( 0.0 );\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <color_fragment>\r\n\r\n\toutgoingLight = diffuseColor.rgb;\r\n\r\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <encodings_fragment>\r\n\t#include <fog_fragment>\r\n\r\n\t}\r\n\r\n}\r\n",line_vert='\r\n\r\nattribute vec3 otherPosition;\r\nattribute float pattern;\r\n\r\nattribute float cellCount;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nuniform vec2 resolution;\r\n\r\n#ifdef USE_PATTERN\r\nvarying float vPattern;\r\n#endif\r\nvarying float vDistance;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <color_vertex>\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\tvec2 ndcPos1 = gl_Position.xy / gl_Position.w;\r\n\r\n\tvec4 other_Position = projectionMatrix * modelViewMatrix * vec4( otherPosition, 1.0 );\r\n\tvec2 ndcPos2 = other_Position.xy / other_Position.w;\r\n\r\n\tfloat aspect = resolution.x / resolution.y;\r\n\r\n\tvec2 dir = ndcPos2 - ndcPos1;\r\n\r\n\tdir.x *= aspect;\r\n\r\n\t// Work out which end of the line we\'re on\r\n\tbool end = false;\r\n\tif ( dir.y < -EPSILON ) {\r\n\t\tend = true;\r\n\t}\r\n\telse if ( dir.y > EPSILON ) {\r\n\t\tend = false;\r\n\t}\r\n\telse if ( dir.x < -EPSILON ) {\r\n\t\tend = true;\r\n\t}\r\n\r\n\tvDistance = end ? 0.0 : length( dir * resolution ) / 2.0;\r\n\r\n#ifdef USE_PATTERN\r\n\t// Add 0.5 to prevent float rounding errors due to interpolation of the\r\n\t// same value at each end of the line dipping below the "int" value.\r\n\tvPattern = pattern + 0.5;\r\n#endif\r\n\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n',thickline_vert='\r\n\r\nattribute vec3 positionStart;\r\nattribute vec3 positionEnd;\r\n\r\nattribute vec3 colorStart;\r\nattribute vec3 colorEnd;\r\n\r\nattribute float pattern;\r\n\r\nattribute float linewidthStart;\r\nattribute float linewidthEnd;\r\n\r\nattribute float cellCount;\r\nattribute float cellOffset;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nuniform float linewidth;\r\nuniform vec2 resolution;\r\n\r\n#ifdef USE_PATTERN\r\nvarying float vPattern;\r\n#endif\r\nvarying float vDistance;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount + cellOffset;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n#ifdef USE_COLOR\r\n\tvColor.xyz = ( position.y < 0.5 ) ? colorStart.xyz : colorEnd.xyz;\r\n#endif\r\n\r\n#ifdef USE_PATTERN\r\n\t// Add 0.5 to prevent float rounding errors due to interpolation of the\r\n\t// same value at each end of the line dipping below the "int" value.\r\n\tvPattern = pattern + 0.5;\r\n#endif\r\n\r\n\tfloat aspect = resolution.x / resolution.y;\r\n\r\n\tvec4 start = modelViewMatrix * vec4( positionStart, 1.0 );\r\n\tvec4 end = modelViewMatrix * vec4( positionEnd, 1.0 );\r\n\r\n\tvec4 clipStart = projectionMatrix * start;\r\n\tvec4 clipEnd = projectionMatrix * end;\r\n\r\n\tvec2 ndcStart = clipStart.xy / clipStart.w;\r\n\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\r\n\r\n\tvec2 dir = ndcEnd - ndcStart;\r\n\tvec2 dirOrig = dir;\r\n\r\n\tdir.x *= aspect;\r\n\tdir = normalize( dir );\r\n\r\n\tvec2 offset = vec2( dir.y, -dir.x );\r\n\r\n\tdir.x /= aspect;\r\n\toffset.x /= aspect;\r\n\r\n\tif ( position.x < 0.5 ) offset *= -1.0;\r\n\r\n\toffset += ( position.y < 0.5 ) ? -dir : dir;\r\n\r\n\tfloat widthFactor, avgWidthFactor;\r\n#ifdef USE_LINEWIDTH\r\n\twidthFactor = ( position.y < 0.5 ) ? linewidthStart : linewidthEnd;\r\n\tavgWidthFactor = ( linewidthStart + linewidthEnd ) / 2.0;\r\n#else\r\n\twidthFactor = avgWidthFactor = linewidth;\r\n#endif\r\n\toffset *= widthFactor;\r\n\tdir *= widthFactor;\r\n\r\n\toffset /= resolution.y;\r\n\tdir /= resolution.y;\r\n\r\n\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\r\n\r\n\toffset *= clip.w;\r\n\tclip.xy += offset;\r\n\r\n\t// Jitter the line forward a little\r\n\tif ( clip.z > -1.0 ) {\r\n\t\tclip.z -= 5.0e-4;\r\n\t\tif ( clip.z < -1.0 ) clip.z = -1.0;\r\n\t}\r\n\r\n\tgl_Position = clip;\r\n\r\n\tvDistance = ( position.y < 0.5) ? 0.0 : ( length( dirOrig * resolution ) + 2.0 * length( dir * resolution ) ) / avgWidthFactor / 2.0;\r\n\r\n\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end;\r\n\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n',meshbasic_frag="\r\n\r\nuniform float stipple;\r\nuniform vec3 stippleColor;\r\nuniform float stipplePattern[ 64 ];\r\n\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float pickState[ 1 ];\r\n\r\nvarying vec3 pickColor;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n\tvarying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tgl_FragColor = vec4( pickColor, 1.0 );\r\n\r\n\t} else {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n\tif( stipple > 0.5 ) {\r\n\r\n\t\tvec2 coord = floor( mod( gl_FragCoord.xy, 32.0 ) );\r\n\t\tint index = int( floor( coord.x / 16.0 ) + ( coord.y * 2.0 ) );\r\n\r\n\t\tfor ( int i=0; i<64; i++ ) {\r\n\r\n\t\t\tif ( i == index ) {\r\n\r\n\t\t\t\tfloat shift = pow( 2.0, floor( mod( gl_FragCoord.x, 16.0 ) ) );\r\n\r\n\t\t\t\tif( mod( floor( stipplePattern[ i ] / shift ), 2.0 ) > 0.5 ) {\r\n\t\t\t\t\tdiffuseColor = vec4( stippleColor, opacity );\r\n\t\t\t\t}\r\n\t\t\t\telse if ( stipple < 1.5 ) {\r\n\t\t\t\t\tdiscard;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <specularmap_fragment>\r\n\r\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\r\n\t// accumulation (baked indirect lighting only)\r\n\t#ifdef USE_LIGHTMAP\r\n\r\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\r\n\r\n\t#else\r\n\r\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\r\n\r\n\t#endif\r\n\r\n\t// modulation\r\n\t#include <aomap_fragment>\r\n\r\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\r\n\r\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\r\n\r\n\t#include <envmap_fragment>\r\n\r\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <encodings_fragment>\r\n\t#include <fog_fragment>\r\n\r\n\t}\r\n\r\n}\r\n",meshbasic_vert="\r\n\r\nattribute float cellCount;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <uv_vertex>\r\n\t#include <uv2_vertex>\r\n\t#include <color_vertex>\r\n\t#include <skinbase_vertex>\r\n\r\n\t#ifdef USE_ENVMAP\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\r\n\t#endif\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <envmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n",meshphong_frag="\r\n\r\nuniform float stipple;\r\nuniform vec3 stippleColor;\r\nuniform float stipplePattern[ 64 ];\r\n\r\nuniform float pickState[ 1 ];\r\n\r\nvarying vec3 pickColor;\r\n\r\n#define PHONG\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <gradientmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars_begin>\r\n#include <lights_pars_maps>\r\n#include <lights_phong_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tgl_FragColor = vec4( pickColor, 1.0 );\r\n\r\n\t} else {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\tvec3 totalEmissiveRadiance = emissive;\r\n\r\n\tif( stipple > 0.5 ) {\r\n\r\n\t\tvec2 coord = floor( mod( gl_FragCoord.xy, 32.0 ) );\r\n\t\tint index = int( floor( coord.x / 16.0 ) + ( coord.y * 2.0 ) );\r\n\r\n\t\tfor ( int i=0; i<64; i++ ) {\r\n\r\n\t\t\tif ( i == index ) {\r\n\r\n\t\t\t\tfloat shift = pow( 2.0, floor( mod( gl_FragCoord.x, 16.0 ) ) );\r\n\r\n\t\t\t\tif( mod( floor( stipplePattern[ i ] / shift ), 2.0 ) > 0.5 ) {\r\n\t\t\t\t\tdiffuseColor = vec4( stippleColor, opacity );\r\n\t\t\t\t}\r\n\t\t\t\telse if ( stipple < 1.5 ) {\r\n\t\t\t\t\tdiscard;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <specularmap_fragment>\r\n\t#include <normal_fragment_begin>\r\n\t#include <normal_fragment_maps>\r\n\t#include <emissivemap_fragment>\r\n\r\n\t// accumulation\r\n\t#include <lights_phong_fragment>\r\n\t#include <lights_fragment_begin>\r\n\t#include <lights_fragment_maps>\r\n\t#include <lights_fragment_end>\r\n\r\n\t// modulation\r\n\t#include <aomap_fragment>\r\n\r\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n\t#include <envmap_fragment>\r\n\r\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n\t#include <tonemapping_fragment>\r\n\t#include <encodings_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <dithering_fragment>\r\n\r\n\t}\r\n\r\n}\r\n",meshphong_vert="\r\n\r\nattribute float cellCount;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#define PHONG\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n\tvarying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <uv_vertex>\r\n\t#include <uv2_vertex>\r\n\t#include <color_vertex>\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n\tvNormal = normalize( transformedNormal );\r\n\r\n#endif\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n\tvViewPosition = - mvPosition.xyz;\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <envmap_vertex>\r\n\t#include <shadowmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n",ShaderChunk={points_frag:points_frag,points_vert:points_vert,line_frag:line_frag,line_vert:line_vert,thickline_vert:thickline_vert,meshbasic_frag:meshbasic_frag,meshbasic_vert:meshbasic_vert,meshphong_frag:meshphong_frag,meshphong_vert:meshphong_vert},ShaderLib={points:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.points,THREE.UniformsLib.fog,UniformsLib.pick]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},line:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,UniformsLib.pick,UniformsLib.line]),vertexShader:ShaderChunk.line_vert,fragmentShader:ShaderChunk.line_frag},thick:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,UniformsLib.pick,UniformsLib.line,{linewidth:{value:1}}]),vertexShader:ShaderChunk.thickline_vert,fragmentShader:ShaderChunk.line_frag},basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,UniformsLib.pick,UniformsLib.mesh]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,UniformsLib.pick,UniformsLib.mesh,{specular:{value:new THREE.Color(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag}};function PickMaterial(e){THREE.ShaderMaterial.call(this),Object.defineProperties(this,{pickState:{get:function(){return this.uniforms.pickState.value},set:function(e){this.uniforms.pickState.value=e}},startCell:{get:function(){return this.uniforms.startCell.value},set:function(e){this.uniforms.startCell.value=e}}}),this.setValues(e)}function PointsMaterial(e){PickMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.points.uniforms),vertexShader:ShaderLib.points.vertexShader,fragmentShader:ShaderLib.points.fragmentShader}),this.color=new THREE.Color(16777215),this.map=null,this.size=1,this.fog=!0,this.setValues(e)}function LineMaterial(e){PickMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.line.uniforms),vertexShader:ShaderLib.line.vertexShader,fragmentShader:ShaderLib.line.fragmentShader}),this.color=new THREE.Color(16777215),this.fog=!0,Object.defineProperties(this,{pattern:{get:function(){return this.uniforms.linePattern.value},set:function(e){this.uniforms.linePattern.value=e}},vertexPatterns:{get:function(){return this.defines.USE_PATTERN},set:function(e){this.defines.USE_PATTERN=e}},resolution:{get:function(){return this.uniforms.resolution.value},set:function(e){this.uniforms.resolution.value=e}}}),this.setValues(e)}function ThickLineMaterial(e){LineMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.thick.uniforms),vertexShader:ShaderLib.thick.vertexShader,fragmentShader:ShaderLib.thick.fragmentShader}),Object.defineProperties(this,{linewidth:{get:function(){return this.uniforms.linewidth.value},set:function(e){this.uniforms.linewidth.value=e}},vertexLinewidths:{get:function(){return this.defines.USE_LINEWIDTH},set:function(e){this.defines.USE_LINEWIDTH=e}}}),this.setValues(e)}function MeshBasicMaterial(e){PickMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.basic.uniforms),vertexShader:ShaderLib.basic.vertexShader,fragmentShader:ShaderLib.basic.fragmentShader}),this.color=new THREE.Color(16777215),this.map=null,this.fog=!0,Object.defineProperties(this,{stipple:{get:function(){return this.uniforms.stipple.value},set:function(e){this.uniforms.stipple.value=e}},stippleColor:{get:function(){return this.uniforms.stippleColor.value},set:function(e){this.uniforms.stippleColor.value=e}},stipplePattern:{get:function(){return this.uniforms.stipplePattern.value},set:function(e){this.uniforms.stipplePattern.value=e}}}),this.setValues(e)}function MeshPhongMaterial(e){MeshBasicMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.phong.uniforms),vertexShader:ShaderLib.phong.vertexShader,fragmentShader:ShaderLib.phong.fragmentShader}),this.specular=new THREE.Color(1118481),this.shininess=30,this.lights=!0,this.setValues(e)}function MaterialLoader(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.textures={}}PickMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),PickMaterial.prototype.constructor=PickMaterial,PointsMaterial.prototype=Object.create(PickMaterial.prototype),PointsMaterial.prototype.constructor=PointsMaterial,PointsMaterial.prototype.isPointsMaterial=!0,PointsMaterial.prototype.copy=function(e){return PickMaterial.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this},LineMaterial.prototype=Object.create(PickMaterial.prototype),LineMaterial.prototype.constructor=LineMaterial,LineMaterial.prototype.isLineBasicMaterial=!0,LineMaterial.prototype.copy=function(e){return PickMaterial.prototype.copy.call(this,e),this.color.copy(e.color),this},ThickLineMaterial.prototype=Object.create(LineMaterial.prototype),ThickLineMaterial.prototype.constructor=ThickLineMaterial,MeshBasicMaterial.prototype=Object.create(PickMaterial.prototype),MeshBasicMaterial.prototype.constructor=MeshBasicMaterial,MeshBasicMaterial.prototype.isMeshBasicMaterial=!0,MeshBasicMaterial.prototype.copy=function(e){return PickMaterial.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this},MeshPhongMaterial.prototype=Object.create(MeshBasicMaterial.prototype),MeshPhongMaterial.prototype.constructor=MeshPhongMaterial,MeshPhongMaterial.prototype.isMeshPhongMaterial=!0,MeshPhongMaterial.prototype.isMeshBasicMaterial=!1,MeshPhongMaterial.prototype.copy=function(e){return MeshBasicMaterial.prototype.copy.call(this,e),this.specular.copy(e.specular),this.shininess=e.shininess,this},Object.assign(MaterialLoader.prototype,{load:function(e,t,r,n){var i=this;new FileLoader(i.manager).load(e,function(e){t(i.parse(JSON.parse(e)))},r,n)},setTextures:function(e){this.textures=e},parse:function(e){var t=this.textures;function r(e){return void 0===t[e]&&console.warn("AVS.Three.MaterialLoader: Undefined texture",e),t[e]}var n=new Materials[e.type];if(void 0!==e.uuid&&(n.uuid=e.uuid),void 0!==e.name&&(n.name=e.name),void 0!==e.color&&n.color.setHex(e.color),void 0!==e.roughness&&(n.roughness=e.roughness),void 0!==e.metalness&&(n.metalness=e.metalness),void 0!==e.emissive&&n.emissive.setHex(e.emissive),void 0!==e.specular&&n.specular.setHex(e.specular),void 0!==e.shininess&&(n.shininess=e.shininess),void 0!==e.clearCoat&&(n.clearCoat=e.clearCoat),void 0!==e.clearCoatRoughness&&(n.clearCoatRoughness=e.clearCoatRoughness),void 0!==e.uniforms&&(n.uniforms=e.uniforms),void 0!==e.vertexShader&&(n.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(n.fragmentShader=e.fragmentShader),void 0!==e.vertexColors&&(n.vertexColors=e.vertexColors),void 0!==e.fog&&(n.fog=e.fog),void 0!==e.flatShading&&(n.flatShading=e.flatShading),void 0!==e.blending&&(n.blending=e.blending),void 0!==e.side&&(n.side=e.side),void 0!==e.opacity&&(n.opacity=e.opacity),void 0!==e.transparent&&(n.transparent=e.transparent),void 0!==e.alphaTest&&(n.alphaTest=e.alphaTest),void 0!==e.depthTest&&(n.depthTest=e.depthTest),void 0!==e.depthWrite&&(n.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(n.colorWrite=e.colorWrite),void 0!==e.wireframe&&(n.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(n.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(n.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(n.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.rotation&&(n.rotation=e.rotation),1!==e.linewidth&&(n.linewidth=e.linewidth),void 0!==e.dashSize&&(n.dashSize=e.dashSize),void 0!==e.gapSize&&(n.gapSize=e.gapSize),void 0!==e.scale&&(n.scale=e.scale),void 0!==e.polygonOffset&&(n.polygonOffset=e.polygonOffset),void 0!==e.polygonOffsetFactor&&(n.polygonOffsetFactor=e.polygonOffsetFactor),void 0!==e.polygonOffsetUnits&&(n.polygonOffsetUnits=e.polygonOffsetUnits),void 0!==e.skinning&&(n.skinning=e.skinning),void 0!==e.morphTargets&&(n.morphTargets=e.morphTargets),void 0!==e.dithering&&(n.dithering=e.dithering),void 0!==e.visible&&(n.visible=e.visible),void 0!==e.userData&&(n.userData=e.userData),void 0!==e.shading&&(n.flatShading=1===e.shading),void 0!==e.size&&(n.size=e.size),void 0!==e.sizeAttenuation&&(n.sizeAttenuation=e.sizeAttenuation),void 0!==e.pattern&&(n.pattern=e.pattern),void 0!==e.vertexPatterns&&(n.vertexPatterns=e.vertexPatterns),void 0!==e.vertexLinewidths&&(n.vertexLinewidths=e.vertexLinewidths),void 0!==e.stipple&&(n.stipple=e.stipple),void 0!==e.stippleColor&&n.stippleColor.setHex(e.stippleColor),void 0!==e.stipplePattern&&(n.stipplePattern=e.stipplePattern),void 0!==e.map&&(n.map=r(e.map)),void 0!==e.alphaMap&&(n.alphaMap=r(e.alphaMap),n.transparent=!0),void 0!==e.bumpMap&&(n.bumpMap=r(e.bumpMap)),void 0!==e.bumpScale&&(n.bumpScale=e.bumpScale),void 0!==e.normalMap&&(n.normalMap=r(e.normalMap)),void 0!==e.normalScale){var i=e.normalScale;!1===Array.isArray(i)&&(i=[i,i]),n.normalScale=(new THREE.Vector2).fromArray(i)}if(void 0!==e.displacementMap&&(n.displacementMap=r(e.displacementMap)),void 0!==e.displacementScale&&(n.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(n.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(n.roughnessMap=r(e.roughnessMap)),void 0!==e.metalnessMap&&(n.metalnessMap=r(e.metalnessMap)),void 0!==e.emissiveMap&&(n.emissiveMap=r(e.emissiveMap)),void 0!==e.emissiveIntensity&&(n.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(n.specularMap=r(e.specularMap)),void 0!==e.envMap&&(n.envMap=r(e.envMap)),void 0!==e.reflectivity&&(n.reflectivity=e.reflectivity),void 0!==e.lightMap&&(n.lightMap=r(e.lightMap)),void 0!==e.lightMapIntensity&&(n.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(n.aoMap=r(e.aoMap)),void 0!==e.aoMapIntensity&&(n.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(n.gradientMap=r(e.gradientMap)),void 0!==e.clippingPlanes){n.clippingPlanes=[];for(var a=0,o=e.clippingPlanes.length;a<o;a++){var s=e.clippingPlanes[a],l=new THREE.Plane(new THREE.Vector3(s.normal[0],s.normal[1],s.normal[2]),s.constant);n.clippingPlanes.push(l)}}return n}});var Materials={ShadowMaterial:THREE.ShadowMaterial,SpriteMaterial:THREE.SpriteMaterial,RawShaderMaterial:THREE.RawShaderMaterial,ShaderMaterial:THREE.ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:THREE.MeshPhysicalMaterial,MeshStandardMaterial:THREE.MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:THREE.MeshToonMaterial,MeshNormalMaterial:THREE.MeshNormalMaterial,MeshLambertMaterial:THREE.MeshLambertMaterial,MeshDepthMaterial:THREE.MeshDepthMaterial,MeshBasicMaterial:MeshBasicMaterial,LineDashedMaterial:THREE.LineDashedMaterial,LineBasicMaterial:THREE.LineBasicMaterial,Material:THREE.Material,LineMaterial:LineMaterial,ThickLineMaterial:ThickLineMaterial};function LinePatternBufferGeometryLoader(e){this.bufferGeometryLoader=e}function ThickLineSegmentsBufferGeometry(){THREE.InstancedBufferGeometry.call(this),this.type="ThickLineSegmentsBufferGeometry";this.addAttribute("position",new THREE.Float32BufferAttribute([0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,0],3));this.addAttribute("cellOffset",new THREE.Float32BufferAttribute([0,0,0,1,1,1],1))}function ThickLineBufferGeometryLoader(){}function ThickLineSegments(e,t){THREE.Mesh.call(this,e,t),this.type="ThickLineSegments"}function BillboardText(){THREE.Object3D.call(this),this.type="BillboardText",this.text="Label",this.fontSize=16,this.fontStyle="normal",this.fontWeight="normal",this.textDecoration="",this.fontFamily="sans-serif",this.color=new THREE.Color(0),this.textAlign="",this.transform="",this.transformOrigin="",this.div=document.createElement("div"),this.div.style.position="absolute",this.div.style.whiteSpace="nowrap",this.div.id="label",this.scene=null,this.updateStyle()}function ObjectLoader(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.texturePath=""}Object.assign(LinePatternBufferGeometryLoader.prototype,{parse:function(e){var t=this.bufferGeometryLoader.parse(e),r=t.attributes.position;if(void 0!==r){for(var n=new THREE.Float32BufferAttribute(r.array.length,3),i=r.array.length/6,a=0;a<i;a++)n.array[6*a+0]=r.array[6*a+3],n.array[6*a+1]=r.array[6*a+4],n.array[6*a+2]=r.array[6*a+5],n.array[6*a+3]=r.array[6*a+0],n.array[6*a+4]=r.array[6*a+1],n.array[6*a+5]=r.array[6*a+2];t.addAttribute("otherPosition",n)}return t}}),ThickLineSegmentsBufferGeometry.prototype=Object.assign(Object.create(THREE.InstancedBufferGeometry.prototype),{constructor:ThickLineSegmentsBufferGeometry,isThickLineSegmentsBufferGeometry:!0,applyMatrix:function(e){var t=this.attributes.positionStart,r=this.attributes.positionEnd;return void 0!==t&&(e.applyToBufferAttribute(t),e.applyToBufferAttribute(r),t.data.needsUpdate=!0,r.data.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},setPositions:function(e){var t=new THREE.InstancedInterleavedBuffer(new Float32Array(e),6,1);this.addAttribute("positionStart",new THREE.InterleavedBufferAttribute(t,3,0)),this.addAttribute("positionEnd",new THREE.InterleavedBufferAttribute(t,3,3)),this.computeBoundingBox(),this.computeBoundingSphere()},setColors:function(e){var t=new THREE.InstancedInterleavedBuffer(new Float32Array(e),6,1);this.addAttribute("colorStart",new THREE.InterleavedBufferAttribute(t,3,0)),this.addAttribute("colorEnd",new THREE.InterleavedBufferAttribute(t,3,3))},setPatterns:function(e){var t=new THREE.InstancedInterleavedBuffer(new Float32Array(e),2,1);this.addAttribute("pattern",new THREE.InterleavedBufferAttribute(t,1,0))},setLinewidths:function(e){var t=new THREE.InstancedInterleavedBuffer(new Float32Array(e),2,1);this.addAttribute("linewidthStart",new THREE.InterleavedBufferAttribute(t,1,0)),this.addAttribute("linewidthEnd",new THREE.InterleavedBufferAttribute(t,1,1))},computeBoundingBox:function(){var e=new THREE.Box3;return function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var t=this.attributes.positionStart,r=this.attributes.positionEnd;void 0!==t&&void 0!==r&&(this.boundingBox.setFromBufferAttribute(t),e.setFromBufferAttribute(r),this.boundingBox.union(e))}}(),computeBoundingSphere:function(){var e=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere),null===this.boundingBox&&this.computeBoundingBox();var t=this.attributes.positionStart,r=this.attributes.positionEnd;if(void 0!==t&&void 0!==r){var n=this.boundingSphere.center;this.boundingBox.getCenter(n);for(var i=0,a=0,o=t.count;a<o;a++)e.fromBufferAttribute(t,a),i=Math.max(i,n.distanceToSquared(e)),e.fromBufferAttribute(r,a),i=Math.max(i,n.distanceToSquared(e));this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error("AVS.Three.ThickLineSegmentsBufferGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}}()}),ThickLineBufferGeometryLoader.prototype={parse:function(e){var t=new ThickLineSegmentsBufferGeometry,r=e.data.attributes;return void 0!==r.position&&t.setPositions(r.position.array),void 0!==r.color&&t.setColors(r.color.array),void 0!==r.pattern&&t.setPatterns(r.pattern.array),void 0!==r.linewidth&&t.setLinewidths(r.linewidth.array),t}},ThickLineSegments.prototype=Object.assign(Object.create(THREE.Mesh.prototype),{constructor:ThickLineSegments,isThickLineSegments:!0,raycast:function(){var e=new THREE.Matrix4,t=new THREE.Ray,r=new THREE.Sphere;return function(n,i){var a=n.linePrecision,o=a*a,s=this.geometry,l=this.matrixWorld;if(null===s.boundingSphere&&s.computeBoundingSphere(),r.copy(s.boundingSphere),r.applyMatrix4(l),!1!==n.ray.intersectsSphere(r)){e.getInverse(l),t.copy(n.ray).applyMatrix4(e);for(var c=new THREE.Vector3,d=new THREE.Vector3,h=new THREE.Vector3,u=new THREE.Vector3,p=s.attributes.positionStart.array,f=0,m=p.length/3-1;f<m;f+=2){if(c.fromArray(p,3*f),d.fromArray(p,3*f+3),!(t.distanceSqToSegment(c,d,u,h)>o)){u.applyMatrix4(this.matrixWorld);var g=n.ray.origin.distanceTo(u);g<n.near||g>n.far||i.push({distance:g,point:h.clone().applyMatrix4(this.matrixWorld),index:f,face:null,faceIndex:null,object:this})}}}}}()}),BillboardText.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:BillboardText,isBillboardText:!0,addToScene:function(e){this.scene=e,e.labels.push(this),e.labelDiv.appendChild(this.div),this.updateStyle()},updateStyle:function(){this.div.innerHTML=decodeURIComponent(this.text.replace(/\+/g,"%20")),this.div.style.fontSize=this.fontSize+"pt",this.div.style.fontFamily=this.fontFamily,this.div.style.fontStyle=this.fontStyle,this.div.style.fontWeight=this.fontWeight,this.div.style.textDecoration=this.textDecoration,this.div.style.color="#"+this.color.getHexString(),this.div.style.textAlign=this.textAlign,this.div.style.transform=this.transform,this.div.style.transformOrigin=this.transformOrigin},updatePosition:function(){var e=(new THREE.Vector3).setFromMatrixPosition(this.matrixWorld);e.project(this.scene.camera);var t=this.scene.labelDiv;e.x=(e.x+1)/2*t.offsetWidth,e.y=(1-(e.y+1)/2)*t.offsetHeight,this.div.style.left=e.x+"px",this.div.style.top=e.y+"px"}}),Object.assign(ObjectLoader.prototype,{load:function(e,t,r,n,i){""===this.texturePath&&(this.texturePath=e.substring(0,e.lastIndexOf("/")+1));var a=this,o=new FileLoader(a.manager);o.setRequestHeader({"Content-type":"application/json"}),o.load(e,function(r){var i=null;try{i=JSON.parse(r)}catch(t){return void 0!==n&&n(t),void console.error("AVS.Three.ObjectLoader: Can't parse "+e+".",t.message)}var o=i.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?a.parse(i,t):console.error("AVS.Three.ObjectLoader: Can't load "+e+". Use THREE.JSONLoader instead.")},r,n,i)},setTexturePath:function(e){return this.texturePath=e,this},setCrossOrigin:function(e){return this.crossOrigin=e,this},parse:function(e,t,r,n,i,a,o){var s=this.parseShape(e.shapes),l=this.parseGeometries(e.geometries,s,a),c=this.parseImages(e.images,function(){void 0!==t&&t(u)},r),d=this.parseTextures(e.textures,c,n),h=this.parseMaterials(e.materials,d,i),u=this.parseObject(e.object,l,h);return void 0!==o&&(o.add(u),u.saveVisible=u.visible,u.visible=!1),e.animations&&(u.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(u),u},parseShape:function(e){var t={};if(void 0!==e)for(var r=0,n=e.length;r<n;r++){var i=(new THREE.Shape).fromJSON(e[r]);t[i.uuid]=i}return t},parseGeometries:function(e,t,r){var n={};if(void 0!==r&&(n=r),void 0!==e)for(var i=new THREE.JSONLoader,a=new THREE.BufferGeometryLoader,o=new LinePatternBufferGeometryLoader(a),s=new ThickLineBufferGeometryLoader,l=0,c=e.length;l<c;l++){var d,h=e[l];switch(h.type){case"BufferGeometry":d=a.parse(h);break;case"LinePatternBufferGeometry":d=o.parse(h);break;case"ThickLineBufferGeometry":d=s.parse(h);break;case"Geometry":d=i.parse(h,this.texturePath).geometry;break;default:console.warn('AVS.Three.ObjectLoader: Unsupported geometry type "'+h.type+'"');continue}d.uuid=h.uuid,void 0!==h.name&&(d.name=h.name),!0===d.isBufferGeometry&&void 0!==h.userData&&(d.userData=h.userData),n[h.uuid]=d}return n},parseMaterials:function(e,t,r){var n={};if(void 0!==r&&(n=r),void 0!==e){var i=new MaterialLoader;i.setTextures(t);for(var a=0,o=e.length;a<o;a++){var s=e[a];if("MultiMaterial"===s.type){for(var l=[],c=0;c<s.materials.length;c++)l.push(i.parse(s.materials[c]));n[s.uuid]=l}else n[s.uuid]=i.parse(s)}}return n},parseAnimations:function(e){for(var t=[],r=0;r<e.length;r++){var n=e[r],i=THREE.AnimationClip.parse(n);void 0!==n.uuid&&(i.uuid=n.uuid),t.push(i)}return t},parseImages:function(e,t,r){var n=this,i={};function a(e){return n.manager.itemStart(e),s.load(e,function(){n.manager.itemEnd(e)},void 0,function(){n.manager.itemEnd(e),n.manager.itemError(e)})}if(void 0!==r&&(i=r),void 0!==e&&e.length>0){var o=new THREE.LoadingManager(t),s=new THREE.ImageLoader(o);s.setCrossOrigin(this.crossOrigin);for(var l=0,c=e.length;l<c;l++){var d=e[l],h=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(d.url)?d.url:n.texturePath+d.url;i[d.uuid]=a(h)}}return i},parseTextures:function(e,t,r){function n(e,t){return"number"==typeof e?e:(console.warn("AVS.Three.ObjectLoader.parseTextures: Constant should be in numeric form.",e),t[e])}var i={};if(void 0!==r&&(i=r),void 0!==e)for(var a=0,o=e.length;a<o;a++){var s=e[a];void 0===s.image&&console.warn('AVS.Three.ObjectLoader: No "image" specified for',s.uuid),void 0===t[s.image]&&console.warn("AVS.Three.ObjectLoader: Undefined image",s.image);var l=new THREE.Texture(t[s.image]);l.needsUpdate=!0,l.uuid=s.uuid,void 0!==s.name&&(l.name=s.name),void 0!==s.mapping&&(l.mapping=n(s.mapping,TEXTURE_MAPPING)),void 0!==s.offset&&l.offset.fromArray(s.offset),void 0!==s.repeat&&l.repeat.fromArray(s.repeat),void 0!==s.center&&l.center.fromArray(s.center),void 0!==s.rotation&&(l.rotation=s.rotation),void 0!==s.wrap&&(l.wrapS=n(s.wrap[0],TEXTURE_WRAPPING),l.wrapT=n(s.wrap[1],TEXTURE_WRAPPING)),void 0!==s.format&&(l.format=s.format),void 0!==s.minFilter&&(l.minFilter=n(s.minFilter,TEXTURE_FILTER)),void 0!==s.magFilter&&(l.magFilter=n(s.magFilter,TEXTURE_FILTER)),void 0!==s.anisotropy&&(l.anisotropy=s.anisotropy),void 0!==s.flipY&&(l.flipY=s.flipY),i[s.uuid]=l}return i},parseObject:function(e,t,r){var n;function i(e){return void 0===t[e]&&console.warn("AVS.Three.ObjectLoader: Undefined geometry",e),t[e]}function a(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],n=0,i=e.length;n<i;n++){var a=e[n];void 0===r[a]&&console.warn("AVS.Three.ObjectLoader: Undefined material",a),t.push(r[a])}return t}return void 0===r[e]&&console.warn("AVS.Three.ObjectLoader: Undefined material",e),r[e]}}switch(e.type){case"Scene":n=new THREE.Scene,void 0!==e.background&&Number.isInteger(e.background)&&(n.background=new THREE.Color(e.background)),void 0!==e.fog&&("Fog"===e.fog.type?n.fog=new THREE.Fog(e.fog.color,e.fog.near,e.fog.far):"FogExp2"===e.fog.type&&(n.fog=new THREE.FogExp2(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":n=new THREE.PerspectiveCamera(e.fov,e.aspect,e.near,e.far),void 0!==e.focus&&(n.focus=e.focus),void 0!==e.zoom&&(n.zoom=e.zoom),void 0!==e.filmGauge&&(n.filmGauge=e.filmGauge),void 0!==e.filmOffset&&(n.filmOffset=e.filmOffset),void 0!==e.view&&(n.view=Object.assign({},e.view));break;case"OrthographicCamera":n=new THREE.OrthographicCamera(e.left,e.right,e.top,e.bottom,e.near,e.far);break;case"AmbientLight":n=new THREE.AmbientLight(e.color,e.intensity);break;case"DirectionalLight":n=new THREE.DirectionalLight(e.color,e.intensity);break;case"PointLight":n=new THREE.PointLight(e.color,e.intensity,e.distance,e.decay);break;case"SpotLight":n=new THREE.SpotLight(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"RectAreaLight":n=new THREE.RectAreaLight(e.color,e.intensity,e.width,e.height);break;case"HemisphereLight":n=new THREE.HemisphereLight(e.color,e.groundColor,e.intensity);break;case"SkinnedMesh":console.warn("AVS.Three.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":case"Quads":var o=i(e.geometry),s=a(e.material);(n=o.bones&&o.bones.length>0?new THREE.SkinnedMesh(o,s):new THREE.Mesh(o,s)).cellType="Quads"===e.type?CellTypeEnum.Quads:CellTypeEnum.Triangles;break;case"LOD":n=new THREE.LOD;break;case"Line":n=new THREE.Line(i(e.geometry),a(e.material),e.mode);break;case"LineLoop":n=new THREE.LineLoop(i(e.geometry),a(e.material));break;case"LineSegments":(n=new THREE.LineSegments(i(e.geometry),a(e.material))).cellType=CellTypeEnum.Lines;break;case"ThickLineSegments":(n=new ThickLineSegments(i(e.geometry),a(e.material))).cellType=CellTypeEnum.Quads;break;case"PointCloud":case"Points":(n=new THREE.Points(i(e.geometry),a(e.material))).cellType=CellTypeEnum.Points;break;case"Sprite":n=new THREE.Sprite(a(e.material));break;case"Group":n=new THREE.Group;break;case"BillboardText":n=new BillboardText,void 0!==e.text&&(n.text=e.text),void 0!==e.fontSize&&(n.fontSize=e.fontSize),void 0!==e.fontStyle&&(n.fontStyle=e.fontStyle),void 0!==e.fontWeight&&(n.fontWeight=e.fontWeight),void 0!==e.fontFamily&&(n.fontFamily=e.fontFamily),void 0!==e.textDecoration&&(n.textDecoration=e.textDecoration),void 0!==e.color&&n.color.setHex(e.color),void 0!==e.textAlign&&(n.textAlign=e.textAlign),void 0!==e.transform&&(n.transform=e.transform),void 0!==e.transformOrigin&&(n.transformOrigin=e.transformOrigin);break;default:n=new THREE.Object3D}if(n.uuid=e.uuid,void 0!==e.name&&(n.name=e.name),void 0!==e.matrix?(n.matrix.fromArray(e.matrix),void 0!==e.matrixAutoUpdate&&(n.matrixAutoUpdate=e.matrixAutoUpdate),n.matrixAutoUpdate&&n.matrix.decompose(n.position,n.quaternion,n.scale)):(void 0!==e.position&&n.position.fromArray(e.position),void 0!==e.rotation&&n.rotation.fromArray(e.rotation),void 0!==e.quaternion&&n.quaternion.fromArray(e.quaternion),void 0!==e.scale&&n.scale.fromArray(e.scale)),void 0!==e.castShadow&&(n.castShadow=e.castShadow),void 0!==e.receiveShadow&&(n.receiveShadow=e.receiveShadow),e.shadow&&(void 0!==e.shadow.bias&&(n.shadow.bias=e.shadow.bias),void 0!==e.shadow.radius&&(n.shadow.radius=e.shadow.radius),void 0!==e.shadow.mapSize&&n.shadow.mapSize.fromArray(e.shadow.mapSize),void 0!==e.shadow.camera&&(n.shadow.camera=this.parseObject(e.shadow.camera))),void 0!==e.visible&&(n.visible=e.visible),void 0!==e.frustumCulled&&(n.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(n.renderOrder=e.renderOrder),void 0!==e.userData&&(n.userData=e.userData),void 0!==e.children)for(var l=e.children,c=0;c<l.length;c++)n.add(this.parseObject(l[c],t,r));if("LOD"===e.type)for(var d=e.levels,h=0;h<d.length;h++){var u=d[h],p=n.getObjectByProperty("uuid",u.object);void 0!==p&&n.addLevel(p,u.distance)}return n}});var TEXTURE_MAPPING={UVMapping:THREE.UVMapping,CubeReflectionMapping:THREE.CubeReflectionMapping,CubeRefractionMapping:THREE.CubeRefractionMapping,EquirectangularReflectionMapping:THREE.EquirectangularReflectionMapping,EquirectangularRefractionMapping:THREE.EquirectangularRefractionMapping,SphericalReflectionMapping:THREE.SphericalReflectionMapping,CubeUVReflectionMapping:THREE.CubeUVReflectionMapping,CubeUVRefractionMapping:THREE.CubeUVRefractionMapping},TEXTURE_WRAPPING={RepeatWrapping:THREE.RepeatWrapping,ClampToEdgeWrapping:THREE.ClampToEdgeWrapping,MirroredRepeatWrapping:THREE.MirroredRepeatWrapping},TEXTURE_FILTER={NearestFilter:THREE.NearestFilter,NearestMipMapNearestFilter:THREE.NearestMipMapNearestFilter,NearestMipMapLinearFilter:THREE.NearestMipMapLinearFilter,LinearFilter:THREE.LinearFilter,LinearMipMapNearestFilter:THREE.LinearMipMapNearestFilter,LinearMipMapLinearFilter:THREE.LinearMipMapLinearFilter};function Viewer(e,t){var r=e;this.getID=function(){return r},this.pixelRatio=void 0!==t?t:window.devicePixelRatio,this.mainCanvas=document.createElement("canvas"),this.mainCanvas.style.position="absolute",this.mainCanvas.id="mainCanvas",this.mainCtx=this.mainCanvas.getContext("2d"),this.highlightCanvas=document.createElement("canvas"),this.highlightCanvas.style.position="absolute",this.highlightCanvas.id="highlightCanvas",this.highlightCtx=this.highlightCanvas.getContext("2d"),this.labelContainer=document.createElement("div"),this.labelContainer.style.position="absolute",this.labelContainer.style.overflow="hidden",this.labelContainer.style.width="100%",this.labelContainer.style.height="100%",this.labelContainer.id="labelDiv",this.container=document.createElement("div"),this.container.style.position="relative",this.container.style.overflow="hidden",this.container.style.width="100%",this.container.style.height="100%",this.container.appendChild(this.mainCanvas),this.container.appendChild(this.highlightCanvas),this.container.appendChild(this.labelContainer),this.container.id="avsthreeDiv",this.domElement=this.container,this.scenes=[],this.currentScene=null,this.startCell=1,this.background=null,this.controls=[],this.ray=new THREE.Raycaster,this.ray.linePrecision=.001,this.ray.params.Points.threshold=.02,this.validPick=!0,this.pickType=PickTypeEnum.Ray,this.pickDepth=PickDepthEnum.Closest,this.pickRayX=0,this.pickRayY=0,this.pickRectangleLeft=0,this.pickRectangleTop=0,this.pickRectangleRight=1,this.pickRectangleBottom=1,this.selectionListeners=[],this.selectionList=[],this.highlight=!1,this.highlightColor=new THREE.Color(16711680),this.updatePicking=!1,this.pickingTexture=new THREE.WebGLRenderTarget,this.pickingTexture2=new THREE.WebGLRenderTarget,this.useSecondTexture=!1,this.pickState=new Float32Array(1),this.resolution=new THREE.Vector2,this.loading=!1,this.cancelLoad=!1}function TransformInteractor(e){this.object=new THREE.Object3D,this.camera=null,this.scene=null,this.sceneNodeName=null,this.domElement=void 0!==e?e:document,this.enabled=!0,this.target=new THREE.Vector3,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!1,this.keyPanSpeed=7,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:THREE.MOUSE.LEFT,ZOOM:THREE.MOUSE.MIDDLE,PAN:THREE.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.setSceneNodeByName=function(e){t.sceneNodeName=e,null!==t.scene&&(t.object=t.scene.getObjectByName(e))},this.saveState=function(){t.target0.copy(t.target),t.position0.copy(t.object.position),t.zoom0=t.object.zoom},this.reset=function(){t.target.copy(t.target0),t.object.position.copy(t.position0),t.object.zoom=t.zoom0,t.object.updateProjectionMatrix(),t.dispatchEvent(r),t.update(),o=a.NONE},this.update=function(){var e=t.object.quaternion.clone().inverse();d.applyQuaternion(e),l*=c,t.object.position.add(d);var n=(new THREE.Quaternion).setFromEuler(new THREE.Euler(s.phi,s.theta,0,"XYZ"));t.object.quaternion.premultiply(n),t.object.scale.setScalar(l),s.set(0,0,0),c=1,d.set(0,0,0),t.dispatchEvent(r)},this.dispose=function(){t.domElement.removeEventListener("contextmenu",I,!1),t.domElement.removeEventListener("mousedown",M,!1),t.domElement.removeEventListener("wheel",A,!1),t.domElement.removeEventListener("touchstart",N,!1),t.domElement.removeEventListener("touchend",B,!1),t.domElement.removeEventListener("touchmove",U,!1),document.removeEventListener("mousemove",P,!1),document.removeEventListener("mouseup",H,!1),window.removeEventListener("keydown",O,!1)};var t=this,r={type:"change"},n={type:"start"},i={type:"end"},a={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY_PAN:4},o=a.NONE,s=new THREE.Spherical,l=1,c=1,d=new THREE.Vector3,h=new THREE.Vector2,u=new THREE.Vector2,p=new THREE.Vector2,f=new THREE.Vector2,m=new THREE.Vector2,g=new THREE.Vector2,v=new THREE.Vector2,E=new THREE.Vector2,b=new THREE.Vector2;function y(){return Math.pow(.95,t.zoomSpeed)}function T(e){s.theta+=e}function S(e){s.phi+=e}var _,w,R=(_=new THREE.Vector3,function(e,t){_.setFromMatrixColumn(t,0),_.multiplyScalar(e),d.add(_)}),x=function(){var e=new THREE.Vector3;return function(r,n){!0===t.screenSpacePanning?e.setFromMatrixColumn(n,1):(e.setFromMatrixColumn(n,0),e.crossVectors(t.object.up,e)),e.multiplyScalar(-r),d.add(e)}}(),L=(w=new THREE.Vector3,function(e,r){var n=t.domElement===document?t.domElement.body:t.domElement;if(t.camera.isPerspectiveCamera){var i=t.camera.position;w.copy(i).sub(t.target);var a=w.length();a*=Math.tan(t.camera.fov/2*Math.PI/180),R(2*e*a/n.clientHeight,t.object.matrix),x(2*r*a/n.clientHeight,t.object.matrix)}else t.camera.isOrthographicCamera?(R(e*(t.camera.right-t.camera.left)/t.camera.zoom/n.clientWidth,t.object.matrix),x(r*(t.camera.top-t.camera.bottom)/t.camera.zoom/n.clientHeight,t.object.matrix)):(console.warn("WARNING: AVS.Three.TransformInteractor encountered an unknown camera type - pan disabled."),t.enablePan=!1)});function k(e){l*=e}function C(e){l/=e}function M(e){if(!1!==t.enabled){switch(e.preventDefault(),e.button){case t.mouseButtons.ORBIT:if(!1===t.enableRotate)return;!function(e){h.set(e.clientX,e.clientY)}(e),o=a.ROTATE;break;case t.mouseButtons.ZOOM:if(!1===t.enableZoom)return;!function(e){v.set(e.clientX,e.clientY)}(e),o=a.DOLLY;break;case t.mouseButtons.PAN:if(!1===t.enablePan)return;!function(e){f.set(e.clientX,e.clientY)}(e),o=a.PAN}o!==a.NONE&&(document.addEventListener("mousemove",P,!1),document.addEventListener("mouseup",H,!1),t.dispatchEvent(n))}}function P(e){if(!1!==t.enabled)switch(e.preventDefault(),o){case a.ROTATE:if(!1===t.enableRotate)return;!function(e){u.set(e.clientX,e.clientY),p.subVectors(u,h).multiplyScalar(t.rotateSpeed);var r=t.domElement===document?t.domElement.body:t.domElement;T(2*Math.PI*p.x/r.clientHeight),S(2*Math.PI*p.y/r.clientHeight),h.copy(u),t.update()}(e);break;case a.DOLLY:if(!1===t.enableZoom)return;!function(e){E.set(e.clientX,e.clientY),b.subVectors(E,v),b.y>0?k(y()):b.y<0&&C(y()),v.copy(E),t.update()}(e);break;case a.PAN:if(!1===t.enablePan)return;!function(e){m.set(e.clientX,e.clientY),g.subVectors(m,f).multiplyScalar(t.panSpeed),L(g.x,g.y),f.copy(m),t.update()}(e)}}function H(e){!1!==t.enabled&&(document.removeEventListener("mousemove",P,!1),document.removeEventListener("mouseup",H,!1),t.dispatchEvent(i),o=a.NONE)}function A(e){!1===t.enabled||!1===t.enableZoom||o!==a.NONE&&o!==a.ROTATE||(e.preventDefault(),e.stopPropagation(),t.dispatchEvent(n),function(e){e.deltaY<0?C(y()):e.deltaY>0&&k(y()),t.update()}(e),t.dispatchEvent(i))}function O(e){!1!==t.enabled&&!1!==t.enableKeys&&!1!==t.enablePan&&function(e){switch(e.keyCode){case t.keys.UP:L(0,t.keyPanSpeed),t.update();break;case t.keys.BOTTOM:L(0,-t.keyPanSpeed),t.update();break;case t.keys.LEFT:L(t.keyPanSpeed,0),t.update();break;case t.keys.RIGHT:L(-t.keyPanSpeed,0),t.update()}}(e)}function N(e){if(!1!==t.enabled){switch(e.preventDefault(),e.touches.length){case 1:if(!1===t.enableRotate)return;!function(e){h.set(e.touches[0].pageX,e.touches[0].pageY)}(e),o=a.TOUCH_ROTATE;break;case 2:if(!1===t.enableZoom&&!1===t.enablePan)return;!function(e){if(t.enableZoom){var r=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(r*r+n*n);v.set(0,i)}if(t.enablePan){var a=.5*(e.touches[0].pageX+e.touches[1].pageX),o=.5*(e.touches[0].pageY+e.touches[1].pageY);f.set(a,o)}}(e),o=a.TOUCH_DOLLY_PAN;break;default:o=a.NONE}o!==a.NONE&&t.dispatchEvent(n)}}function U(e){if(!1!==t.enabled)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(!1===t.enableRotate)return;if(o!==a.TOUCH_ROTATE)return;!function(e){u.set(e.touches[0].pageX,e.touches[0].pageY),p.subVectors(u,h).multiplyScalar(t.rotateSpeed);var r=t.domElement===document?t.domElement.body:t.domElement;T(2*Math.PI*p.x/r.clientHeight),S(2*Math.PI*p.y/r.clientHeight),h.copy(u),t.update()}(e);break;case 2:if(!1===t.enableZoom&&!1===t.enablePan)return;if(o!==a.TOUCH_DOLLY_PAN)return;!function(e){if(t.enableZoom){var r=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(r*r+n*n);E.set(0,i),b.set(0,Math.pow(E.y/v.y,t.zoomSpeed)),k(b.y),v.copy(E)}if(t.enablePan){var a=.5*(e.touches[0].pageX+e.touches[1].pageX),o=.5*(e.touches[0].pageY+e.touches[1].pageY);m.set(a,o),g.subVectors(m,f).multiplyScalar(t.panSpeed),L(g.x,g.y),f.copy(m)}t.update()}(e);break;default:o=a.NONE}}function B(e){!1!==t.enabled&&(t.dispatchEvent(i),o=a.NONE)}function I(e){!1!==t.enabled&&e.preventDefault()}t.domElement.addEventListener("contextmenu",I,!1),t.domElement.addEventListener("mousedown",M,!1),t.domElement.addEventListener("wheel",A,!1),t.domElement.addEventListener("touchstart",N,!1),t.domElement.addEventListener("touchend",B,!1),t.domElement.addEventListener("touchmove",U,!1),window.addEventListener("keydown",O,!1),this.update()}Viewer.prototype={constructor:Viewer,setWebGLRenderer:function(e){this.renderer=e,this.renderer.autoClear=!1,this.renderer.setPixelRatio(this.pixelRatio),this.renderer.localClippingEnabled=!0,this.renderer.sortObjects=!1},updateSize:function(){var e=this.container.clientWidth,t=this.container.clientHeight;if(e!==this.width||t!==this.height){this.width=e,this.height=t,this.mainCanvas.width=e*this.pixelRatio,this.mainCanvas.height=t*this.pixelRatio,this.mainCanvas.style.width=e+"px",this.mainCanvas.style.height=t+"px",this.highlightCanvas.width=e*this.pixelRatio,this.highlightCanvas.height=t*this.pixelRatio,this.highlightCanvas.style.width=e+"px",this.highlightCanvas.style.height=t+"px",this.pickingTexture.setSize(e,t),this.pixelBuffer=new Uint8Array(4*e*t),this.useSecondTexture&&(this.pickingTexture2.setSize(e,t),this.pixelBuffer2=new Uint8Array(4*e*t)),this.updatePicking=!0;for(var r=0;r<this.scenes.length;r++)this.updateSceneSize(this.scenes[r])}},updateSceneSize:function(e){e.left=void 0!==e.userData.left?Math.floor(this.width*e.userData.left):0,e.width=void 0!==e.userData.width?Math.floor(this.width*e.userData.width):this.width,e.top=void 0!==e.userData.top?Math.floor(this.height*e.userData.top):0,e.height=void 0!==e.userData.height?Math.floor(this.height*e.userData.height):this.height,e.bottom=this.height-e.height-e.top,e.camera.isPerspectiveCamera&&(e.camera.aspect=e.width/e.height,e.camera.updateProjectionMatrix());var t=e.labelDiv;t.style.left=e.left+"px",t.style.width=e.width+"px",t.style.top=e.top+"px",t.style.height=e.height+"px"},clearGeometry:function(){for(;this.labelContainer.lastChild;)this.labelContainer.removeChild(this.labelContainer.lastChild);this.scenes=[],this.startCell=1},setPickDepth:function(e){void 0===e&&(e=PickDepthEnum.Closest),this.pickDepth!==e&&(this.pickDepth=e)},setPickRay:function(e,t){if(e<0||t<0||e>this.width||t>this.height)return this.validPick=!1,void console.error("AVS.Three.Viewer: pick ray coordinates out of range.");this.pickType=PickTypeEnum.Ray,this.pickRayX=e,this.pickRayY=t,this.validPick=!0},setPickRectangle:function(e,t,r,n){var i=Math.min(e,r),a=Math.max(e,r),o=Math.min(t,n),s=Math.max(t,n);if(i<0||o<0||a>this.width||s>this.height)return this.validPick=!1,void console.error("AVS.Three.Viewer: pick rectangle coordinates out of range.");this.pickType=PickTypeEnum.Rectangle,this.pickRectangleLeft=i,this.pickRectangleRight=a,this.pickRectangleTop=o,this.pickRectangleBottom=s,this.validPick=!0},addInteractor:function(e){var t=this;this.controls.push(e),e.addEventListener("change",function(){t.updatePicking=!0,t.render()})},connectInteractor:function(e){for(var t=0;t<this.controls.length;t++){var r=this.controls[t];r.sceneNodeName===e.name&&(r.object=e,r.scene=this.currentScene,r.camera=this.currentScene.camera)}},connectInteractors:function(){for(var e=0;e<this.controls.length;e++)for(var t=this.controls[e],r=0;r<this.scenes.length;r++){var n=this.scenes[r],i=n.getObjectByName(t.sceneNodeName);if(void 0!==i){t.object=i,t.scene=n,t.camera=n.camera;break}}},addGeometry:function(e){if("Scenes"===e.name)for(var t=0;t<e.children.length;t++)this.addScene(e.children[t]);this.connectInteractors()},addScene:function(e){for(var t=0;t<e.children.length;t++){var r=e.children[t];if(r.isPerspectiveCamera||r.isOrthographicCamera){e.camera=r;break}}if(void 0!==e.camera){this.scenes.push(e),this.currentScene=e,e.labels=[];var n=document.createElement("div");n.style.position="absolute",n.style.overflow="hidden",n.id="sceneLabelDiv",e.labelDiv=n,this.labelContainer.appendChild(n),this.addLabels(e),this.updateSceneSize(e),this.createPickingInfo(e),e.highlightScene=new THREE.Scene,e.highlightScene.add(new THREE.Group);for(t=0;t<e.children.length;t++)!0===e.children[t].isLight&&e.highlightScene.add(e.children[t].clone())}},createPickingInfo:function(e){var t=this;e.traverse(function(e){if(void 0!==e.geometry){if(void 0===e.geometry.attributes.cellCount){var r,n;if(e.isThickLineSegments){var i=(s=e.geometry.attributes.positionStart.array.length/3)/2;n=s;for(var a=new Float32Array(i),o=0;o<i;o++)a[o]=2*o;r=new THREE.InstancedBufferAttribute(a,1)}else{var s,l=1;e.isPoints?l=1:e.isLineSegments?l=2:e.isMesh&&(l=3),n=(s=e.geometry.attributes.position.array.length/3)/l,r=new THREE.Float32BufferAttribute(s,1);for(o=0;o<n;o++)for(var c=0;c<l;c++)r.array[o*l+c]=o}e.geometry.addAttribute("cellCount",r),e.geometry.nCells=n}e.nCells=e.geometry.nCells,e.startCell=t.startCell,e.onBeforeRender=function(e,t,r,n,i,a){i.uniforms.startCell.value=this.startCell;var o=e.properties.get(i);if(o.program){var s=e.getContext();s.useProgram(o.program.program),o.program.getUniforms().setValue(s,"startCell",this.startCell)}},t.startCell+=e.nCells,!t.useSecondTexture&&t.startCell>16777215&&(t.pickingTexture2.setSize(t.width,t.height),t.pixelBuffer2=new Uint8Array(4*t.width*t.height),t.useSecondTexture=!0),t.updatePicking=!0}})},addLabels:function(e){var t=this;e.traverse(function(e){e.isBillboardText?e.addToScene(t.currentScene):void 0!==e.material&&(e.material.pickState=t.pickState,void 0!==e.material.isLineBasicMaterial&&(e.material.resolution=t.resolution))})},loadGeometryAsJson:function(e){var t=(new ObjectLoader).parse(e);this.clearGeometry(),this.addGeometry(t)},loadGeometryAsUrl:function(e){if(void 0===e.jsonRequest.streamProperties||"CHUNK"!==e.jsonRequest.streamProperties.type)if(void 0===e.jsonRequest.streamProperties||"OBOE_STREAM"!==e.jsonRequest.streamProperties.type){var t=this;!0===this.loading&&(this.cancelLoad=!0),this.loading=!0,(new ObjectLoader).load(e.url,function(r){!1===t.cancelLoad&&(t.clearGeometry(),t.addGeometry(r),t.loading=!1,void 0!=e.success&&e.success()),t.cancelLoad=!1},e.progress,e.error,e.jsonRequest)}else this.loadGeometryAsUrlStream(e);else this.loadGeometryAsUrlChunk(e)},loadGeometryAsUrlChunk:function(e){var t,r=this,n=[],i=new ObjectLoader,a=new FileLoader(r.manager);void 0!==e.render&&e.render;var o={},s={},l={},c={},d=0,h=-1,u=0,p=0;function f(t){p--,t.visible=t.saveVisible,r.addLabels(t),r.createPickingInfo(t),void 0!=e.success&&h>0&&0==p?e.success():u++}function m(a){if("Group"===a.type){var h=i.parse(a);"SceneRoot"===h.userData.type?r.connectSceneRoot(h):void 0!==t&&(t.add(h),r.connectInteractor(h)),n.push(h),t=h}else if("FinishGroup"===a.type){var u=n.pop();t=n.length>0?n[n.length-1]:u}else if("Geometry"===a.type)p++,i.parse(a,f,o,s,l,c,t),d++;else if("Layout"===a.type){var m=i.parse(a);r.addScene(m),t=m}else console.log("ERROR: unknown type: "+a.type);void 0!=e.progress&&e.progress()}!0!==this.loading&&(this.loading=!0,this.clearGeometry(),function t(n,i){a.setRequestHeader({"Content-type":"application/json"}),a.load(n,function(a){var o=null;try{o=JSON.parse(a)}catch(t){return void 0!==e.error&&e.error(t),void console.error("AVS.Three.Viewer.loadGeometryAsUrlChunk: Can't parse chunk "+n+".",t.message)}if(void 0!==o.events){console.log("Events in chunk = "+o.events.length);for(var s=0;s<o.events.length;s++)m(o.events[s]);void 0!==i.streamProperties.streamUpdate&&i.streamProperties.streamUpdate(u),!0===o.moreChunks?(i.streamProperties.chunkId=o.chunkId,t(n,i)):(h=d-1,r.loading=!1,void 0!=e.success&&0==p&&e.success())}else console.error("AVS.Three.Viewer.loadGeometryAsUrlChunk: Can't get events from "+n)},void 0,e.error,i)}(e.url,e.jsonRequest))},loadGeometryAsUrlStream:function(e){var t,r=this,n=[],i=new ObjectLoader;void 0!==e.render&&e.render;var a={},o={},s={},l={},c=0,d=-1,h=0,u=0;function p(t){u--,t.visible=t.saveVisible,r.addLabels(t),r.createPickingInfo(t),void 0!=e.success&&d>0&&0==u?e.success():(void 0!=e.streamUpdate&&void 0!==e.streamUpdateStep&&(h===e.streamUpdateFirst||h>0&&h%e.streamUpdateStep==0)&&e.streamUpdate(h),h++)}oboe(e.url).fail(function(t){void 0!=e.error&&e.error()}).done(function(){d=c-1,void 0!=e.success&&0==u&&e.success()}).node("events.*",function(d){if("Group"===d.type){var h=i.parse(d);"SceneRoot"===h.userData.type?r.connectSceneRoot(h):void 0!==t&&(t.add(h),r.connectInteractor(h)),n.push(h),t=h}else if("FinishGroup"===d.type){var f=n.pop();t=n.length>0?n[n.length-1]:f}else if("Geometry"===d.type)u++,i.parse(d,p,a,o,s,l,t),c++;else if("Layout"===d.type){var m=i.parse(d);r.addScene(m),t=m}else console.log("ERROR: unknown type: "+d.type);return void 0!=e.progress&&e.progress(),oboe.drop})},highlightRender:function(){if(void 0!==this.renderer){this.renderer.setSize(this.width,this.height),this.renderer.setClearColor(0,0),this.renderer.clear();for(var e=0;e<this.scenes.length;e++){var t=this.scenes[e];this.renderer.setViewport(t.left,t.top,t.width,t.height),this.renderer.setScissor(t.left,t.top,t.width,t.height),this.renderer.setScissorTest(!0),this.resolution.x=t.width,this.resolution.y=t.height,this.renderer.render(t.highlightScene,t.camera)}this.highlightCtx.clearRect(0,0,this.width*this.pixelRatio,this.height*this.pixelRatio),this.highlightCtx.drawImage(this.renderer.domElement,0,0)}else console.error("AVS.Three.Viewer: WebGLRenderer not set.")},render:function(){if(void 0!==this.renderer){this.updateSize(),this.renderer.setSize(this.width,this.height),null!==this.background?this.renderer.setClearColor(this.background,1):this.renderer.setClearColor(0,0),this.renderer.clear();for(var e=0;e<this.scenes.length;e++){var t=this.scenes[e];if(this.renderer.setViewport(t.left,t.top,t.width,t.height),this.renderer.setScissor(t.left,t.top,t.width,t.height),this.renderer.setScissorTest(!0),this.updatePicking){var r=new THREE.Vector4(t.left,t.bottom,t.width,t.height);this.pickingTexture.viewport=r,this.pickingTexture.scissor=r,this.pickingTexture.scissorTest=!0,this.useSecondTexture&&(this.pickingTexture2.viewport=r,this.pickingTexture2.scissor=r,this.pickingTexture2.scissorTest=!0)}this.resolution.x=t.width,this.resolution.y=t.height,this.renderer.render(t,t.camera),this.updatePicking&&(this.pickState[0]=1,this.renderer.render(t,t.camera,this.pickingTexture),this.useSecondTexture&&(this.pickState[0]=2,this.renderer.render(t,t.camera,this.pickingTexture2))),this.pickState[0]=0;for(var n=0;n<t.labels.length;n++)t.labels[n].updatePosition()}this.mainCtx.clearRect(0,0,this.width*this.pixelRatio,this.height*this.pixelRatio),this.mainCtx.drawImage(this.renderer.domElement,0,0),this.updatePicking&&(this.renderer.readRenderTargetPixels(this.pickingTexture,0,0,this.width,this.height,this.pixelBuffer),this.useSecondTexture&&this.renderer.readRenderTargetPixels(this.pickingTexture2,0,0,this.width,this.height,this.pixelBuffer2),this.updatePicking=!1),this.highlightRender()}else console.error("AVS.Three.Viewer: WebGLRenderer not set.")},release:function(){this.renderer.forceContextLoss(),this.renderer=null},addSelectionListener:function(e){void 0!==e&&this.selectionListeners.push(e)},concatObjectsFromCellNums:function(e,t,r,n){if(void 0!==r&&0!==r.length&&0!==r[0]){if(void 0===n&&(n=1,r.sort(function(e,t){return e-t})),void 0!==t.nCells&&r[0]>=n&&r[0]<n+t.nCells){for(var i=!1,a=0;a<e.length;a++)if(e[a].object===t){i=!0;break}if(!i){var o=1;t.isLineSegments?o=2:t.isMesh&&(o=3),e.push({object:t,index:o*(r[0]-n)})}for(;r.length>0&&r[0]>=n&&r[0]<n+t.nCells;)r.splice(0,1);if(0===r.length)return}void 0!==t.nCells&&(n+=t.nCells);for(a=0;a<t.children.length&&void 0!==(n=this.concatObjectsFromCellNums(e,t.children[a],r,n));a++);return n}},pick:function(){var e=[],t=!1,r=!1;if(!1!==this.validPick)if(null!==this.renderer){for(var n=0;n<this.scenes.length;n++){var i=this.scenes[n];if(this.pickType===PickTypeEnum.Rectangle){for(var a=Math.max(this.pickRectangleLeft,i.left),o=Math.max(this.pickRectangleTop,i.top),s=Math.min(this.pickRectangleRight,i.left+i.width),l=Math.min(this.pickRectangleBottom,i.top+i.height),c=[],d=a;d<s;d++)for(var h=o;h<l;h++)if(this.pickDepth===PickDepthEnum.All){var u=(d-i.left)/i.width*2-1,p=-(h-i.top)/i.height*2+1;this.ray.setFromCamera(new THREE.Vector2(u,p),i.camera);for(var f=this.ray.intersectObjects(i.children,!0),m=0;m<f.length;m++){for(var g=!1,v=0;v<e.length;v++)if(f[m].object===e[v].object){g=!0;break}g||(e=e.concat(f[m]))}}else{var E=4*(d+(this.height-h)*this.width),b=255*this.pixelBuffer[E]*255+255*this.pixelBuffer[E+1]+this.pixelBuffer[E+2];!0===this.useSecondTexture&&(b+=255*this.pixelBuffer2[E]*255*255*255*255+255*this.pixelBuffer2[E+1]*255*255*255+255*this.pixelBuffer2[E+2]*255*255),b>0&&-1===c.indexOf(b)&&c.push(b)}this.pickDepth===PickDepthEnum.Closest&&this.concatObjectsFromCellNums(e,i,c)}else{if(this.pickRayX<i.left||this.pickRayX>i.left+i.width||this.pickRayY<i.top||this.pickRayY>i.top+i.height)continue;if(this.pickDepth===PickDepthEnum.All){u=(this.pickRayX-i.left)/i.width*2-1,p=-(this.pickRayY-i.top)/i.height*2+1;this.ray.setFromCamera(new THREE.Vector2(u,p),i.camera),e=e.concat(this.ray.intersectObjects(i.children,!0))}else{E=4*(this.pickRayX+(this.height-this.pickRayY)*this.width),b=255*this.pixelBuffer[E]*255+255*this.pixelBuffer[E+1]+this.pixelBuffer[E+2];!0===this.useSecondTexture&&(b+=255*this.pixelBuffer2[E]*255*255*255*255+255*this.pixelBuffer2[E+1]*255*255*255+255*this.pixelBuffer2[E+2]*255*255),this.concatObjectsFromCellNums(e,i,[b])}}}if(this.selectionList.length>0){if(this.highlight){for(var y=0;y<this.selectionList.length;y++){void 0!==(x=this.selectionList[y].object).saveMaterial&&(x.material=x.saveMaterial,x.saveMaterial=void 0,t=!0),void 0!==x.saveGeometry&&(x.geometry=x.saveGeometry,x.saveGeometry=void 0,t=!0)}for(y=0;y<this.scenes.length;y++){var T=this.scenes[y].highlightScene.children[0].children;T.length>0&&(T.length=0,r=!0)}}this.selectionList.length=0}for(y=0;y<e.length;y++)if(void 0===e[y].object.userData.pickable||!0===e[y].object.userData.pickable)if(this.pickLevel===PickLevelEnum.SceneNode)for(var S=e[y].object.parent,_=0;_<S.children.length;_++){for(var w=S.children[_],R=(g=!1,0);R<this.selectionList.length;R++)if(this.selectionList[R].object===w){g=!0;break}g||this.selectionList.push({object:w})}else if(this.pickLevel===PickLevelEnum.CellSet){for(g=!1,_=0;_<this.selectionList.length;_++)if(this.selectionList[_].object===e[y].object){g=!0;break}g||this.selectionList.push(e[y])}else if(this.pickLevel===PickLevelEnum.Cell){for(g=!1,_=0;_<this.selectionList.length;_++)if(this.selectionList[_].object===e[y].object){g=!0,this.selectionList[_].indices.push(e[y].index);break}g||this.selectionList.push({object:e[y].object,indices:[e[y].index]})}for(n=0;n<this.selectionListeners.length;n++)this.selectionListeners[n](this.selectionList,this.pickRayX,this.pickRayY);if(this.highlight)for(y=0;y<this.selectionList.length;y++){var x,L,k=(x=this.selectionList[y].object).material.clone();if(k.opacity=1,this.pickLevel===PickLevelEnum.Cell){var C=x.geometry;if(k.vertexColors=THREE.VertexColors,k.color=new THREE.Color(16777215),x.isThickLineSegments){L=new THREE.InstancedBufferGeometry;var M,P=C.attributes.colorStart;if(void 0===P){M=new THREE.InstancedInterleavedBuffer(new Float32Array(C.attributes.positionStart.array.length),6,1);var H=0;for(_=0;_<M.array.length/3;_++)M.array[H++]=x.material.color.r,M.array[H++]=x.material.color.g,M.array[H++]=x.material.color.b}else M=P.data.clone();H=null;var A=null,O=x.indices;for(_=0;_<O.length;_++){H=6*Math.floor(O[_]/6),A=2;for(R=0;R<A;R++)M.array[H++]=this.highlightColor.r,M.array[H++]=this.highlightColor.g,M.array[H++]=this.highlightColor.b}for(var N in L.addAttribute("colorStart",new THREE.InterleavedBufferAttribute(M,3,0)),L.addAttribute("colorEnd",new THREE.InterleavedBufferAttribute(M,3,3)),C.attributes)"colorStart"!==N&&"colorEnd"!==N&&L.addAttribute(N,C.attributes[N])}else{L=new THREE.BufferGeometry;var U=C.attributes.color,B=null;if(void 0===U){B=new THREE.Float32BufferAttribute(C.attributes.position.array.length,3);for(H=0,_=0;_<B.array.length/3;_++)B.array[H++]=x.material.color.r,B.array[H++]=x.material.color.g,B.array[H++]=x.material.color.b}else B=U.clone();for(H=null,A=null,O=x.indices,_=0;_<O.length;_++){x.cellType===CellTypeEnum.Points?(H=3*O[_],A=1):x.cellType===CellTypeEnum.Lines?(H=3*O[_],A=2):x.cellType===CellTypeEnum.Triangles?(H=3*O[_],A=3):(H=18*Math.floor(O[_]/6),A=6);for(R=0;R<A;R++)B.array[H++]=this.highlightColor.r,B.array[H++]=this.highlightColor.g,B.array[H++]=this.highlightColor.b}for(var N in L.addAttribute("color",B),C.attributes)"color"!==N&&L.addAttribute(N,C.attributes[N])}}else k.vertexColors=THREE.NoColors,k.color=this.highlightColor,L=x.geometry;if(void 0!==(i=this.getObjectScene(x)).userData.is3D&&!1===i.userData.is3D){var I=x.clone();I.material=k,I.geometry=L,I.matrixAutoUpdate=!1,I.matrix.copy(x.matrixWorld),i.highlightScene.children[0].add(I),r=!0}else x.saveMaterial=x.material,x.material=k,x.saveGeometry=x.geometry,x.geometry=L,t=!0}!0===t?this.render():!0===r&&this.highlightRender()}else console.error("AVS.Three.Viewer: WebGLRenderer not set.");else console.error("AVS.Three.Viewer: invalid pick ray or rectangle.")},getObjectScene:function(e){return"Scene"===e.type?e:this.getObjectScene(e.parent)}},TransformInteractor.prototype=Object.create(THREE.EventDispatcher.prototype),TransformInteractor.prototype.constructor=TransformInteractor,Object.defineProperties(TransformInteractor.prototype,{center:{get:function(){return console.warn("AVS.Three.TransformInteractor: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("AVS.Three.TransformInteractor: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("AVS.Three.TransformInteractor: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("AVS.Three.TransformInteractor: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("AVS.Three.TransformInteractor: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("AVS.Three.TransformInteractor: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("AVS.Three.TransformInteractor: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("AVS.Three.TransformInteractor: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("AVS.Three.TransformInteractor: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("AVS.Three.TransformInteractor: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("AVS.Three.TransformInteractor: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("AVS.Three.TransformInteractor: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("AVS.Three.TransformInteractor: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}});export{Viewer,TransformInteractor,REVISION,DEFAULT_VIEWER_WIDTH,DEFAULT_VIEWER_HEIGHT,RAYCASTER_LINE_PRECISION,PickDepthEnum,PickTypeEnum,PickLevelEnum,CellTypeEnum};

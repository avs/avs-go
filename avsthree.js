// Licensed by Advanced Visual Systems Inc. to You under the Apache License, Version 2.0.
import*as THREE from"three";var REVISION="1",DEFAULT_VIEWER_WIDTH=400,DEFAULT_VIEWER_HEIGHT=400,RAYCASTER_LINE_PRECISION=.03,PickDepthEnum={All:0,Closest:1},PickLevelEnum={Cell:0,CellSet:1,SceneNode:2},CellTypeEnum={Points:1,Lines:2,Triangles:3,Quads:4};function FileLoader(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager}Object.assign(FileLoader.prototype,{load:function(e,t,r,n,i){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var a=this,o=THREE.Cache.get(e);if(void 0!==o)return a.manager.itemStart(e),setTimeout(function(){t&&t(o),a.manager.itemEnd(e)},0),o;var s=e.match(/^data:(.*?)(;base64)?,(.*)$/);if(s){var l=s[1],c=!!s[2],h=s[3];h=window.decodeURIComponent(h),c&&(h=window.atob(h));try{var u,d=(this.responseType||"").toLowerCase();switch(d){case"arraybuffer":case"blob":for(var p=new Uint8Array(h.length),f=0;f<h.length;f++)p[f]=h.charCodeAt(f);u="blob"===d?new Blob([p.buffer],{type:l}):p.buffer;break;case"document":var m=new DOMParser;u=m.parseFromString(h,l);break;case"json":u=JSON.parse(h);break;default:u=h}window.setTimeout(function(){t&&t(u),a.manager.itemEnd(e)},0)}catch(t){window.setTimeout(function(){n&&n(t),a.manager.itemEnd(e),a.manager.itemError(e)},0)}}else{var g=new XMLHttpRequest;for(var v in void 0===i?g.open("GET",e,!0):g.open("POST",e,!0),g.addEventListener("load",function(r){var i=this.response;THREE.Cache.add(e,i),200===this.status||0===this.status?(0===this.status&&console.warn("AVS.Three.FileLoader: HTTP Status 0 received."),t&&t(i),a.manager.itemEnd(e)):(n&&n(r),a.manager.itemEnd(e),a.manager.itemError(e))},!1),g.addEventListener("progress",function(e){r&&r(e)},!1),g.addEventListener("error",function(t){n&&n(t),a.manager.itemEnd(e),a.manager.itemError(e)},!1),void 0!==this.responseType&&(g.responseType=this.responseType),void 0!==this.withCredentials&&(g.withCredentials=this.withCredentials),g.overrideMimeType&&g.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)g.setRequestHeader(v,this.requestHeader[v]);g.send(JSON.stringify(i))}return a.manager.itemStart(e),g},setPath:function(e){return this.path=e,this},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}});var UniformsLib={pick:{pickState:{value:new Float32Array(1)},startCell:{value:0}},line:{linePattern:{value:65535},resolution:{value:new THREE.Vector2(1,1)}},thick:{linewidth:{value:1}},mesh:{stipple:{value:0},stippleColor:{value:new THREE.Color(0)},stipplePattern:{value:new Float32Array(64)}}},points_frag="\r\n\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float pickState[ 1 ];\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <map_particle_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tgl_FragColor = vec4( pickColor, 1.0 );\r\n\r\n\t} else {\r\n\r\n\tvec3 outgoingLight = vec3( 0.0 );\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_particle_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphatest_fragment>\r\n\r\n\toutgoingLight = diffuseColor.rgb;\r\n\r\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <encodings_fragment>\r\n\t#include <fog_fragment>\r\n\r\n\t}\r\n\r\n}\r\n",points_vert="\r\n\r\nattribute float cellCount;\r\n\r\nuniform float size;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <color_vertex>\r\n\t#include <begin_vertex>\r\n\t#include <project_vertex>\r\n\r\n\tgl_PointSize = size;\r\n\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <worldpos_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n",line_frag="\r\n\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float linePattern;\r\n\r\nuniform float pickState[ 1 ];\r\n\r\nvarying vec3 pickColor;\r\n\r\n#ifdef USE_PATTERN\r\nvarying float vPattern;\r\n#endif\r\nvarying float vDistance;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tgl_FragColor = vec4( pickColor, 1.0 );\r\n\r\n\t} else {\r\n\r\n\tfloat pattern;\r\n#ifdef USE_PATTERN\r\n\tpattern = floor( vPattern ); // Geometry (cell) line pattern\r\n#else\r\n\tpattern = linePattern; // Uniform line pattern\r\n#endif\r\n\r\n\tfloat shift = pow( 2.0, floor( mod( vDistance, 16.0 ) ) );\r\n\r\n\tif( mod( floor( pattern / shift ), 2.0 ) < 0.5 ) {\r\n\t\tdiscard;\r\n\t}\r\n\r\n\tvec3 outgoingLight = vec3( 0.0 );\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <color_fragment>\r\n\r\n\toutgoingLight = diffuseColor.rgb;\r\n\r\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <encodings_fragment>\r\n\t#include <fog_fragment>\r\n\r\n\t}\r\n\r\n}\r\n",line_vert='\r\n\r\nattribute vec3 otherPosition;\r\nattribute float pattern;\r\n\r\nattribute float cellCount;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nuniform vec2 resolution;\r\n\r\n#ifdef USE_PATTERN\r\nvarying float vPattern;\r\n#endif\r\nvarying float vDistance;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <color_vertex>\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\tvec2 ndcPos1 = gl_Position.xy / gl_Position.w;\r\n\r\n\tvec4 other_Position = projectionMatrix * modelViewMatrix * vec4( otherPosition, 1.0 );\r\n\tvec2 ndcPos2 = other_Position.xy / other_Position.w;\r\n\r\n\tfloat aspect = resolution.x / resolution.y;\r\n\r\n\tvec2 dir = ndcPos2 - ndcPos1;\r\n\r\n\tdir.x *= aspect;\r\n\r\n\t// Work out which end of the line we\'re on\r\n\tbool end = false;\r\n\tif ( dir.y < -EPSILON ) {\r\n\t\tend = true;\r\n\t}\r\n\telse if ( dir.y > EPSILON ) {\r\n\t\tend = false;\r\n\t}\r\n\telse if ( dir.x < -EPSILON ) {\r\n\t\tend = true;\r\n\t}\r\n\r\n\tvDistance = end ? 0.0 : length( dir * resolution ) / 2.0;\r\n\r\n#ifdef USE_PATTERN\r\n\t// Add 0.5 to prevent float rounding errors due to interpolation of the\r\n\t// same value at each end of the line dipping below the "int" value.\r\n\tvPattern = pattern + 0.5;\r\n#endif\r\n\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n',thickline_vert='\r\n\r\nattribute vec3 positionStart;\r\nattribute vec3 positionEnd;\r\n\r\nattribute vec3 colorStart;\r\nattribute vec3 colorEnd;\r\n\r\nattribute float pattern;\r\n\r\nattribute float linewidthStart;\r\nattribute float linewidthEnd;\r\n\r\nattribute float cellCount;\r\nattribute float cellOffset;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nuniform float linewidth;\r\nuniform vec2 resolution;\r\n\r\n#ifdef USE_PATTERN\r\nvarying float vPattern;\r\n#endif\r\nvarying float vDistance;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount + cellOffset;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n#ifdef USE_COLOR\r\n\tvColor.xyz = ( position.y < 0.5 ) ? colorStart.xyz : colorEnd.xyz;\r\n#endif\r\n\r\n#ifdef USE_PATTERN\r\n\t// Add 0.5 to prevent float rounding errors due to interpolation of the\r\n\t// same value at each end of the line dipping below the "int" value.\r\n\tvPattern = pattern + 0.5;\r\n#endif\r\n\r\n\tfloat aspect = resolution.x / resolution.y;\r\n\r\n\tvec4 start = modelViewMatrix * vec4( positionStart, 1.0 );\r\n\tvec4 end = modelViewMatrix * vec4( positionEnd, 1.0 );\r\n\r\n\tvec4 clipStart = projectionMatrix * start;\r\n\tvec4 clipEnd = projectionMatrix * end;\r\n\r\n\tvec2 ndcStart = clipStart.xy / clipStart.w;\r\n\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\r\n\r\n\tvec2 dir = ndcEnd - ndcStart;\r\n\tvec2 dirOrig = dir;\r\n\r\n\tdir.x *= aspect;\r\n\tdir = normalize( dir );\r\n\r\n\tvec2 offset = vec2( dir.y, -dir.x );\r\n\r\n\tdir.x /= aspect;\r\n\toffset.x /= aspect;\r\n\r\n\tif ( position.x < 0.5 ) offset *= -1.0;\r\n\r\n\toffset += ( position.y < 0.5 ) ? -dir : dir;\r\n\r\n\tfloat widthFactor, avgWidthFactor;\r\n#ifdef USE_LINEWIDTH\r\n\twidthFactor = ( position.y < 0.5 ) ? linewidthStart : linewidthEnd;\r\n\tavgWidthFactor = ( linewidthStart + linewidthEnd ) / 2.0;\r\n#else\r\n\twidthFactor = avgWidthFactor = linewidth;\r\n#endif\r\n\toffset *= widthFactor;\r\n\tdir *= widthFactor;\r\n\r\n\toffset /= resolution.y;\r\n\tdir /= resolution.y;\r\n\r\n\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\r\n\r\n\toffset *= clip.w;\r\n\tclip.xy += offset;\r\n\r\n\t// Jitter the line forward a little\r\n\tif ( clip.z > -1.0 ) {\r\n\t\tclip.z -= 5.0e-4;\r\n\t\tif ( clip.z < -1.0 ) clip.z = -1.0;\r\n\t}\r\n\r\n\tgl_Position = clip;\r\n\r\n\tvDistance = ( position.y < 0.5) ? 0.0 : ( length( dirOrig * resolution ) + 2.0 * length( dir * resolution ) ) / avgWidthFactor / 2.0;\r\n\r\n\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end;\r\n\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n',meshbasic_frag="\r\n\r\nuniform float stipple;\r\nuniform vec3 stippleColor;\r\nuniform float stipplePattern[ 64 ];\r\n\r\nuniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float pickState[ 1 ];\r\n\r\nvarying vec3 pickColor;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n\tvarying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tgl_FragColor = vec4( pickColor, 1.0 );\r\n\r\n\t} else {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n\tif( stipple > 0.5 ) {\r\n\r\n\t\tvec2 coord = floor( mod( gl_FragCoord.xy, 32.0 ) );\r\n\t\tint index = int( floor( coord.x / 16.0 ) + ( coord.y * 2.0 ) );\r\n\r\n\t\tfor ( int i=0; i<64; i++ ) {\r\n\r\n\t\t\tif ( i == index ) {\r\n\r\n\t\t\t\tfloat shift = pow( 2.0, floor( mod( gl_FragCoord.x, 16.0 ) ) );\r\n\r\n\t\t\t\tif( mod( floor( stipplePattern[ i ] / shift ), 2.0 ) > 0.5 ) {\r\n\t\t\t\t\tdiffuseColor = vec4( stippleColor, opacity );\r\n\t\t\t\t}\r\n\t\t\t\telse if ( stipple < 1.5 ) {\r\n\t\t\t\t\tdiscard;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <specularmap_fragment>\r\n\r\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\r\n\t// accumulation (baked indirect lighting only)\r\n\t#ifdef USE_LIGHTMAP\r\n\r\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\r\n\r\n\t#else\r\n\r\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\r\n\r\n\t#endif\r\n\r\n\t// modulation\r\n\t#include <aomap_fragment>\r\n\r\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\r\n\r\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\r\n\r\n\t#include <envmap_fragment>\r\n\r\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <tonemapping_fragment>\r\n\t#include <encodings_fragment>\r\n\t#include <fog_fragment>\r\n\r\n\t}\r\n\r\n}\r\n",meshbasic_vert="\r\n\r\nattribute float cellCount;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <uv_vertex>\r\n\t#include <uv2_vertex>\r\n\t#include <color_vertex>\r\n\t#include <skinbase_vertex>\r\n\r\n\t#ifdef USE_ENVMAP\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\r\n\t#endif\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\t#include <envmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n",meshphong_frag="\r\n\r\nuniform float stipple;\r\nuniform vec3 stippleColor;\r\nuniform float stipplePattern[ 64 ];\r\n\r\nuniform float pickState[ 1 ];\r\n\r\nvarying vec3 pickColor;\r\n\r\n#define PHONG\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <gradientmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars_begin>\r\n#include <lights_pars_maps>\r\n#include <lights_phong_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n\t#include <clipping_planes_fragment>\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tgl_FragColor = vec4( pickColor, 1.0 );\r\n\r\n\t} else {\r\n\r\n\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\tvec3 totalEmissiveRadiance = emissive;\r\n\r\n\tif( stipple > 0.5 ) {\r\n\r\n\t\tvec2 coord = floor( mod( gl_FragCoord.xy, 32.0 ) );\r\n\t\tint index = int( floor( coord.x / 16.0 ) + ( coord.y * 2.0 ) );\r\n\r\n\t\tfor ( int i=0; i<64; i++ ) {\r\n\r\n\t\t\tif ( i == index ) {\r\n\r\n\t\t\t\tfloat shift = pow( 2.0, floor( mod( gl_FragCoord.x, 16.0 ) ) );\r\n\r\n\t\t\t\tif( mod( floor( stipplePattern[ i ] / shift ), 2.0 ) > 0.5 ) {\r\n\t\t\t\t\tdiffuseColor = vec4( stippleColor, opacity );\r\n\t\t\t\t}\r\n\t\t\t\telse if ( stipple < 1.5 ) {\r\n\t\t\t\t\tdiscard;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <logdepthbuf_fragment>\r\n\t#include <map_fragment>\r\n\t#include <color_fragment>\r\n\t#include <alphamap_fragment>\r\n\t#include <alphatest_fragment>\r\n\t#include <specularmap_fragment>\r\n\t#include <normal_fragment_begin>\r\n\t#include <normal_fragment_maps>\r\n\t#include <emissivemap_fragment>\r\n\r\n\t// accumulation\r\n\t#include <lights_phong_fragment>\r\n\t#include <lights_fragment_begin>\r\n\t#include <lights_fragment_maps>\r\n\t#include <lights_fragment_end>\r\n\r\n\t// modulation\r\n\t#include <aomap_fragment>\r\n\r\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n\t#include <envmap_fragment>\r\n\r\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n\t#include <tonemapping_fragment>\r\n\t#include <encodings_fragment>\r\n\t#include <fog_fragment>\r\n\t#include <premultiplied_alpha_fragment>\r\n\t#include <dithering_fragment>\r\n\r\n\t}\r\n\r\n}\r\n",meshphong_vert="\r\n\r\nattribute float cellCount;\r\n\r\nuniform float pickState[ 1 ];\r\nuniform float startCell;\r\n\r\nvarying vec3 pickColor;\r\n\r\n#define PHONG\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n\tvarying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n\tif ( pickState[ 0 ] > 0.5 ) {\r\n\r\n\t\tfloat cellNum = startCell + cellCount;\r\n\t\t\r\n\t\tfloat red = fract( cellNum / (255.0*255.0*255.0) );\r\n\r\n\t\tif ( pickState[ 0 ] > 1.5 ) {\r\n\t\r\n\t\t\tfloat red2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat green2 = fract( cellNum / (255.0*255.0*255.0*255.0*255.0) );\r\n\t\t\tfloat blue2 = fract( cellNum / (255.0*255.0*255.0*255.0) );\r\n\t\r\n\t\t\tred2 -= green2 / 255.0;\r\n\t\t\tgreen2 -= blue2 / 255.0;\r\n\t\t\tblue2 -= red / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red2, green2, blue2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfloat green = fract( cellNum / (255.0*255.0) );\r\n\t\t\tfloat blue = fract( cellNum / 255.0 );\r\n\r\n\t\t\tred -= green / 255.0;\r\n\t\t\tgreen -= blue / 255.0;\r\n\r\n\t\t\tpickColor = vec3( red, green, blue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t#include <uv_vertex>\r\n\t#include <uv2_vertex>\r\n\t#include <color_vertex>\r\n\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n\tvNormal = normalize( transformedNormal );\r\n\r\n#endif\r\n\r\n\t#include <begin_vertex>\r\n\t#include <morphtarget_vertex>\r\n\t#include <skinning_vertex>\r\n\t#include <displacementmap_vertex>\r\n\t#include <project_vertex>\r\n\t#include <logdepthbuf_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\r\n\tvViewPosition = - mvPosition.xyz;\r\n\r\n\t#include <worldpos_vertex>\r\n\t#include <envmap_vertex>\r\n\t#include <shadowmap_vertex>\r\n\t#include <fog_vertex>\r\n\r\n}\r\n",ShaderChunk={points_frag:points_frag,points_vert:points_vert,line_frag:line_frag,line_vert:line_vert,thickline_vert:thickline_vert,meshbasic_frag:meshbasic_frag,meshbasic_vert:meshbasic_vert,meshphong_frag:meshphong_frag,meshphong_vert:meshphong_vert},ShaderLib={points:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.points,THREE.UniformsLib.fog,UniformsLib.pick]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},line:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,UniformsLib.pick,UniformsLib.line]),vertexShader:ShaderChunk.line_vert,fragmentShader:ShaderChunk.line_frag},thick:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,UniformsLib.pick,UniformsLib.line,{linewidth:{value:1}}]),vertexShader:ShaderChunk.thickline_vert,fragmentShader:ShaderChunk.line_frag},basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,UniformsLib.pick,UniformsLib.mesh]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,UniformsLib.pick,UniformsLib.mesh,{specular:{value:new THREE.Color(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag}};function PickMaterial(e){THREE.ShaderMaterial.call(this),Object.defineProperties(this,{pickState:{get:function(){return this.uniforms.pickState.value},set:function(e){this.uniforms.pickState.value=e}},startCell:{get:function(){return this.uniforms.startCell.value},set:function(e){this.uniforms.startCell.value=e}}}),this.setValues(e)}function PointsMaterial(e){PickMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.points.uniforms),vertexShader:ShaderLib.points.vertexShader,fragmentShader:ShaderLib.points.fragmentShader}),this.color=new THREE.Color(16777215),this.map=null,this.size=1,this.fog=!0,this.setValues(e)}function LineMaterial(e){PickMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.line.uniforms),vertexShader:ShaderLib.line.vertexShader,fragmentShader:ShaderLib.line.fragmentShader}),this.color=new THREE.Color(16777215),this.fog=!0,Object.defineProperties(this,{pattern:{get:function(){return this.uniforms.linePattern.value},set:function(e){this.uniforms.linePattern.value=e}},vertexPatterns:{get:function(){return this.defines.USE_PATTERN},set:function(e){this.defines.USE_PATTERN=e}},resolution:{get:function(){return this.uniforms.resolution.value},set:function(e){this.uniforms.resolution.value=e}}}),this.setValues(e)}function ThickLineMaterial(e){LineMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.thick.uniforms),vertexShader:ShaderLib.thick.vertexShader,fragmentShader:ShaderLib.thick.fragmentShader}),Object.defineProperties(this,{linewidth:{get:function(){return this.uniforms.linewidth.value},set:function(e){this.uniforms.linewidth.value=e}},vertexLinewidths:{get:function(){return this.defines.USE_LINEWIDTH},set:function(e){this.defines.USE_LINEWIDTH=e}}}),this.setValues(e)}function MeshBasicMaterial(e){PickMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.basic.uniforms),vertexShader:ShaderLib.basic.vertexShader,fragmentShader:ShaderLib.basic.fragmentShader}),this.color=new THREE.Color(16777215),this.map=null,this.fog=!0,Object.defineProperties(this,{stipple:{get:function(){return this.uniforms.stipple.value},set:function(e){this.uniforms.stipple.value=e}},stippleColor:{get:function(){return this.uniforms.stippleColor.value},set:function(e){this.uniforms.stippleColor.value=e}},stipplePattern:{get:function(){return this.uniforms.stipplePattern.value},set:function(e){this.uniforms.stipplePattern.value=e}}}),this.setValues(e)}function MeshPhongMaterial(e){MeshBasicMaterial.call(this,{uniforms:THREE.UniformsUtils.clone(ShaderLib.phong.uniforms),vertexShader:ShaderLib.phong.vertexShader,fragmentShader:ShaderLib.phong.fragmentShader}),this.specular=new THREE.Color(1118481),this.shininess=30,this.lights=!0,this.setValues(e)}function MaterialLoader(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.textures={}}PickMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),PickMaterial.prototype.constructor=PickMaterial,PointsMaterial.prototype=Object.create(PickMaterial.prototype),PointsMaterial.prototype.constructor=PointsMaterial,PointsMaterial.prototype.isPointsMaterial=!0,PointsMaterial.prototype.copy=function(e){return PickMaterial.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this},LineMaterial.prototype=Object.create(PickMaterial.prototype),LineMaterial.prototype.constructor=LineMaterial,LineMaterial.prototype.isLineBasicMaterial=!0,LineMaterial.prototype.copy=function(e){return PickMaterial.prototype.copy.call(this,e),this.color.copy(e.color),this},ThickLineMaterial.prototype=Object.create(LineMaterial.prototype),ThickLineMaterial.prototype.constructor=ThickLineMaterial,MeshBasicMaterial.prototype=Object.create(PickMaterial.prototype),MeshBasicMaterial.prototype.constructor=MeshBasicMaterial,MeshBasicMaterial.prototype.isMeshBasicMaterial=!0,MeshBasicMaterial.prototype.copy=function(e){return PickMaterial.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this},MeshPhongMaterial.prototype=Object.create(MeshBasicMaterial.prototype),MeshPhongMaterial.prototype.constructor=MeshPhongMaterial,MeshPhongMaterial.prototype.isMeshPhongMaterial=!0,MeshPhongMaterial.prototype.isMeshBasicMaterial=!1,MeshPhongMaterial.prototype.copy=function(e){return MeshBasicMaterial.prototype.copy.call(this,e),this.specular.copy(e.specular),this.shininess=e.shininess,this},Object.assign(MaterialLoader.prototype,{load:function(e,t,r,n){var i=this;new FileLoader(i.manager).load(e,function(e){t(i.parse(JSON.parse(e)))},r,n)},setTextures:function(e){this.textures=e},parse:function(e){var t=this.textures;function r(e){return void 0===t[e]&&console.warn("AVS.Three.MaterialLoader: Undefined texture",e),t[e]}var n=new Materials[e.type];if(void 0!==e.uuid&&(n.uuid=e.uuid),void 0!==e.name&&(n.name=e.name),void 0!==e.color&&n.color.setHex(e.color),void 0!==e.roughness&&(n.roughness=e.roughness),void 0!==e.metalness&&(n.metalness=e.metalness),void 0!==e.emissive&&n.emissive.setHex(e.emissive),void 0!==e.specular&&n.specular.setHex(e.specular),void 0!==e.shininess&&(n.shininess=e.shininess),void 0!==e.clearCoat&&(n.clearCoat=e.clearCoat),void 0!==e.clearCoatRoughness&&(n.clearCoatRoughness=e.clearCoatRoughness),void 0!==e.uniforms&&(n.uniforms=e.uniforms),void 0!==e.vertexShader&&(n.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(n.fragmentShader=e.fragmentShader),void 0!==e.vertexColors&&(n.vertexColors=e.vertexColors),void 0!==e.fog&&(n.fog=e.fog),void 0!==e.flatShading&&(n.flatShading=e.flatShading),void 0!==e.blending&&(n.blending=e.blending),void 0!==e.side&&(n.side=e.side),void 0!==e.opacity&&(n.opacity=e.opacity),void 0!==e.transparent&&(n.transparent=e.transparent),void 0!==e.alphaTest&&(n.alphaTest=e.alphaTest),void 0!==e.depthTest&&(n.depthTest=e.depthTest),void 0!==e.depthWrite&&(n.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(n.colorWrite=e.colorWrite),void 0!==e.wireframe&&(n.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(n.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(n.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(n.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.rotation&&(n.rotation=e.rotation),1!==e.linewidth&&(n.linewidth=e.linewidth),void 0!==e.dashSize&&(n.dashSize=e.dashSize),void 0!==e.gapSize&&(n.gapSize=e.gapSize),void 0!==e.scale&&(n.scale=e.scale),void 0!==e.polygonOffset&&(n.polygonOffset=e.polygonOffset),void 0!==e.polygonOffsetFactor&&(n.polygonOffsetFactor=e.polygonOffsetFactor),void 0!==e.polygonOffsetUnits&&(n.polygonOffsetUnits=e.polygonOffsetUnits),void 0!==e.skinning&&(n.skinning=e.skinning),void 0!==e.morphTargets&&(n.morphTargets=e.morphTargets),void 0!==e.dithering&&(n.dithering=e.dithering),void 0!==e.visible&&(n.visible=e.visible),void 0!==e.userData&&(n.userData=e.userData),void 0!==e.shading&&(n.flatShading=1===e.shading),void 0!==e.size&&(n.size=e.size),void 0!==e.sizeAttenuation&&(n.sizeAttenuation=e.sizeAttenuation),void 0!==e.pattern&&(n.pattern=e.pattern),void 0!==e.vertexPatterns&&(n.vertexPatterns=e.vertexPatterns),void 0!==e.vertexLinewidths&&(n.vertexLinewidths=e.vertexLinewidths),void 0!==e.stipple&&(n.stipple=e.stipple),void 0!==e.stippleColor&&n.stippleColor.setHex(e.stippleColor),void 0!==e.stipplePattern&&(n.stipplePattern=e.stipplePattern),void 0!==e.map&&(n.map=r(e.map)),void 0!==e.alphaMap&&(n.alphaMap=r(e.alphaMap),n.transparent=!0),void 0!==e.bumpMap&&(n.bumpMap=r(e.bumpMap)),void 0!==e.bumpScale&&(n.bumpScale=e.bumpScale),void 0!==e.normalMap&&(n.normalMap=r(e.normalMap)),void 0!==e.normalScale){var i=e.normalScale;!1===Array.isArray(i)&&(i=[i,i]),n.normalScale=(new THREE.Vector2).fromArray(i)}if(void 0!==e.displacementMap&&(n.displacementMap=r(e.displacementMap)),void 0!==e.displacementScale&&(n.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(n.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(n.roughnessMap=r(e.roughnessMap)),void 0!==e.metalnessMap&&(n.metalnessMap=r(e.metalnessMap)),void 0!==e.emissiveMap&&(n.emissiveMap=r(e.emissiveMap)),void 0!==e.emissiveIntensity&&(n.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(n.specularMap=r(e.specularMap)),void 0!==e.envMap&&(n.envMap=r(e.envMap)),void 0!==e.reflectivity&&(n.reflectivity=e.reflectivity),void 0!==e.lightMap&&(n.lightMap=r(e.lightMap)),void 0!==e.lightMapIntensity&&(n.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(n.aoMap=r(e.aoMap)),void 0!==e.aoMapIntensity&&(n.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(n.gradientMap=r(e.gradientMap)),void 0!==e.clippingPlanes){n.clippingPlanes=[];for(var a=0,o=e.clippingPlanes.length;a<o;a++){var s=e.clippingPlanes[a],l=new THREE.Plane(new THREE.Vector3(s.normal[0],s.normal[1],s.normal[2]),s.constant);n.clippingPlanes.push(l)}}return n}});var Materials={ShadowMaterial:THREE.ShadowMaterial,SpriteMaterial:THREE.SpriteMaterial,RawShaderMaterial:THREE.RawShaderMaterial,ShaderMaterial:THREE.ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:THREE.MeshPhysicalMaterial,MeshStandardMaterial:THREE.MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:THREE.MeshToonMaterial,MeshNormalMaterial:THREE.MeshNormalMaterial,MeshLambertMaterial:THREE.MeshLambertMaterial,MeshDepthMaterial:THREE.MeshDepthMaterial,MeshBasicMaterial:MeshBasicMaterial,LineDashedMaterial:THREE.LineDashedMaterial,LineBasicMaterial:THREE.LineBasicMaterial,Material:THREE.Material,LineMaterial:LineMaterial,ThickLineMaterial:ThickLineMaterial};function SeriesColorMap(){this.numSourceValues=0,this.sourceValues={},this.destinationValues=[],this.defaultValue=void 0,this.dirty=!1}function DiscreteDataMap(){this.numSourceValues=0,this.sourceValues={},this.destinationValues=[],this.defaultValue=void 0,this.dirty=!1}function BinnedDataMap(){this.sourceValues=[],this.destinationValues=[],this.defaultValue=void 0,this.dirty=!1}function DataMapLoader(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager}function LinePatternBufferGeometryLoader(e){this.bufferGeometryLoader=e}function ThickLineSegmentsBufferGeometry(){THREE.InstancedBufferGeometry.call(this),this.type="ThickLineSegmentsBufferGeometry";this.addAttribute("position",new THREE.Float32BufferAttribute([0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,0],3));this.addAttribute("cellOffset",new THREE.Float32BufferAttribute([0,0,0,1,1,1],1))}function ThickLineBufferGeometryLoader(){}function ThickLineSegments(e,t){THREE.Mesh.call(this,e,t),this.type="ThickLineSegments"}function BillboardText(){THREE.Object3D.call(this),this.type="BillboardText",this.text="Label",this.fontSize=16,this.italic=!1,this.bold=!1,this.fontFamily="sans-serif",this.color=new THREE.Color(0),this.textAlign="",this.transform="",this.transformOrigin="",this.div=document.createElement("div"),this.div.style.position="absolute",this.div.style.whiteSpace="nowrap",this.div.id="label",this.scene=null,this.camera=null,this.updateStyle()}function ObjectLoader(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.texturePath=""}SeriesColorMap.prototype={constructor:SeriesColorMap,getUuid:function(){return this.uuid},setUuid:function(e){this.uuid=e},isDirty:function(){return this.dirty},setDirty:function(e){this.dirty=e},getSourceValues:function(){var e=[];for(var t in this.sourceValues)this.sourceValues.hasOwnProperty(t)&&e.push(t);return e},setSourceValues:function(e){this.numSourceValues=0,this.sourceValues={};for(var t=0;t<e.length;t++){var r=e[t];this.sourceValues.hasOwnProperty(r)||(this.sourceValues[r]=this.numSourceValues,this.numSourceValues++)}this.dirty=!0},getDestinationValues:function(){return this.destinationValues},setDestinationValues:function(e){this.destinationValues=e,this.dirty=!0},getDefaultValue:function(){return this.defaultValue},setDefaultValue:function(e){this.defaultValue=e,this.dirty=!0},evaluate:function(e){e>this.numSourceValues-1&&(e%=this.numSourceValues);var t=this.sourceValues[e];return void 0===t?this.defaultValue:(t>this.destinationValues.length-1&&(t%=this.destinationValues.length),this.destinationValues[t])}},DiscreteDataMap.prototype={constructor:DiscreteDataMap,getUuid:function(){return this.uuid},setUuid:function(e){this.uuid=e},isDirty:function(){return this.dirty},setDirty:function(e){this.dirty=e},getSourceValues:function(){var e=[];for(var t in this.sourceValues)this.sourceValues.hasOwnProperty(t)&&e.push(t);return e},setSourceValues:function(e){this.numSourceValues=0,this.sourceValues={};for(var t=0;t<e.length;t++){var r=e[t];this.sourceValues.hasOwnProperty(r)||(this.sourceValues[r]=this.numSourceValues,this.numSourceValues++)}this.dirty=!0},getDestinationValues:function(){return this.destinationValues},setDestinationValues:function(e){this.destinationValues=e,this.dirty=!0},getDefaultValue:function(){return this.defaultValue},setDefaultValue:function(e){this.defaultValue=e,this.dirty=!0},evaluate:function(e){var t=this.sourceValues[e];return void 0===t?this.defaultValue:(t>this.destinationValues.length-1&&(t%=this.destinationValues.length),this.destinationValues[t])}},BinnedDataMap.prototype={constructor:BinnedDataMap,getUuid:function(){return this.uuid},setUuid:function(e){this.uuid=e},isDirty:function(){return this.dirty},setDirty:function(e){this.dirty=e},getSourceValues:function(){return this.sourceValues},setSourceValues:function(e){this.sourceValues=e,this.dirty=!0},getDestinationValues:function(){return this.destinationValues},setDestinationValues:function(e){this.destinationValues=e,this.dirty=!0},getDefaultValue:function(){return this.defaultValue},setDefaultValue:function(e){this.defaultValue=e,this.dirty=!0},evaluate:function(e){if(e<this.sourceValues[0])return this.defaultValue;for(var t=1;t<this.sourceValues.length;t++)if(e<this.sourceValues[t])return this.destinationValues[t-1];return this.defaultValue}},Object.assign(DataMapLoader.prototype,{load:function(e,t,r,n){var i=this;new FileLoader(i.manager).load(e,function(e){t(i.parse(JSON.parse(e)))},r,n)},parse:function(e,t){var r=void 0;if("SeriesColorMap"===e.type)r=new SeriesColorMap;else if("DiscreteDataMap"===e.type)r=new DiscreteDataMap;else{if("BinnedDataMap"!==e.type)return console.warn("AVS.Three.DataMapLoader: Unknown data map type",e.type),r;r=new BinnedDataMap}if(void 0!==e.sourceValues&&r.setSourceValues(e.sourceValues),void 0!==e.destinationValues)if("Color"===e.destinationValuesType){for(var n=[],i=0;i<e.destinationValues.length;i++)n.push(new THREE.Color(e.destinationValues[i]));r.setDestinationValues(n)}else if("BufferGeometry"===e.destinationValuesType){var a=[];for(i=0;i<e.destinationValues.length;i++)a.push(t[e.destinationValues[i]]);r.setDestinationValues(a)}else r.setDestinationValues(e.destinationValues);return void 0!==e.uuid&&(r.uuid=e.uuid),r.setDirty(!1),r}}),Object.assign(LinePatternBufferGeometryLoader.prototype,{parse:function(e){var t=this.bufferGeometryLoader.parse(e),r=t.attributes.position;if(void 0!==r){for(var n=new THREE.Float32BufferAttribute(r.array.length,3),i=r.array.length/6,a=0;a<i;a++)n.array[6*a+0]=r.array[6*a+3],n.array[6*a+1]=r.array[6*a+4],n.array[6*a+2]=r.array[6*a+5],n.array[6*a+3]=r.array[6*a+0],n.array[6*a+4]=r.array[6*a+1],n.array[6*a+5]=r.array[6*a+2];t.addAttribute("otherPosition",n)}return t}}),ThickLineSegmentsBufferGeometry.prototype=Object.assign(Object.create(THREE.InstancedBufferGeometry.prototype),{constructor:ThickLineSegmentsBufferGeometry,isThickLineSegmentsBufferGeometry:!0,applyMatrix:function(e){var t=this.attributes.positionStart,r=this.attributes.positionEnd;return void 0!==t&&(e.applyToBufferAttribute(t),e.applyToBufferAttribute(r),t.data.needsUpdate=!0,r.data.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},setPositions:function(e){var t=new THREE.InstancedInterleavedBuffer(new Float32Array(e),6,1);this.addAttribute("positionStart",new THREE.InterleavedBufferAttribute(t,3,0)),this.addAttribute("positionEnd",new THREE.InterleavedBufferAttribute(t,3,3)),this.computeBoundingBox(),this.computeBoundingSphere()},setColors:function(e){var t=new THREE.InstancedInterleavedBuffer(new Float32Array(e),6,1);this.addAttribute("colorStart",new THREE.InterleavedBufferAttribute(t,3,0)),this.addAttribute("colorEnd",new THREE.InterleavedBufferAttribute(t,3,3))},setPatterns:function(e){var t=new THREE.InstancedInterleavedBuffer(new Float32Array(e),2,1);this.addAttribute("pattern",new THREE.InterleavedBufferAttribute(t,1,0))},setLinewidths:function(e){var t=new THREE.InstancedInterleavedBuffer(new Float32Array(e),2,1);this.addAttribute("linewidthStart",new THREE.InterleavedBufferAttribute(t,1,0)),this.addAttribute("linewidthEnd",new THREE.InterleavedBufferAttribute(t,1,1))},computeBoundingBox:function(){var e=new THREE.Box3;return function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var t=this.attributes.positionStart,r=this.attributes.positionEnd;void 0!==t&&void 0!==r&&(this.boundingBox.setFromBufferAttribute(t),e.setFromBufferAttribute(r),this.boundingBox.union(e))}}(),computeBoundingSphere:function(){var e=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere),null===this.boundingBox&&this.computeBoundingBox();var t=this.attributes.positionStart,r=this.attributes.positionEnd;if(void 0!==t&&void 0!==r){var n=this.boundingSphere.center;this.boundingBox.getCenter(n);for(var i=0,a=0,o=t.count;a<o;a++)e.fromBufferAttribute(t,a),i=Math.max(i,n.distanceToSquared(e)),e.fromBufferAttribute(r,a),i=Math.max(i,n.distanceToSquared(e));this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error("AVS.Three.ThickLineSegmentsBufferGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}}()}),ThickLineBufferGeometryLoader.prototype={parse:function(e){var t=new ThickLineSegmentsBufferGeometry,r=e.data.attributes;return void 0!==r.position&&t.setPositions(r.position.array),void 0!==r.color&&t.setColors(r.color.array),void 0!==r.pattern&&t.setPatterns(r.pattern.array),void 0!==r.linewidth&&t.setLinewidths(r.linewidth.array),t}},ThickLineSegments.prototype=Object.assign(Object.create(THREE.Mesh.prototype),{constructor:ThickLineSegments,isThickLineSegments:!0,raycast:function(){var e=new THREE.Matrix4,t=new THREE.Ray,r=new THREE.Sphere;return function(n,i){var a=n.linePrecision,o=a*a,s=this.geometry,l=this.matrixWorld;if(null===s.boundingSphere&&s.computeBoundingSphere(),r.copy(s.boundingSphere),r.applyMatrix4(l),!1!==n.ray.intersectsSphere(r)){e.getInverse(l),t.copy(n.ray).applyMatrix4(e);for(var c=new THREE.Vector3,h=new THREE.Vector3,u=new THREE.Vector3,d=new THREE.Vector3,p=s.attributes.positionStart.array,f=0,m=p.length/3-1;f<m;f+=2){if(c.fromArray(p,3*f),h.fromArray(p,3*f+3),!(t.distanceSqToSegment(c,h,d,u)>o)){d.applyMatrix4(this.matrixWorld);var g=n.ray.origin.distanceTo(d);g<n.near||g>n.far||i.push({distance:g,point:u.clone().applyMatrix4(this.matrixWorld),index:f,face:null,faceIndex:null,object:this})}}}}}()}),BillboardText.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:BillboardText,setSceneCamera:function(e,t){this.scene=e,this.camera=t,e.labels.push(this),e.labelDiv.appendChild(this.div),this.updateStyle()},updateStyle:function(){this.div.innerHTML=decodeURIComponent(this.text.replace(/\+/g,"%20")),this.div.style.fontSize=this.fontSize+"pt",this.div.style.fontFamily=this.fontFamily,this.div.style.color="#"+this.color.getHexString(),this.div.style.textAlign=this.textAlign,this.div.style.transform=this.transform,this.div.style.transformOrigin=this.transformOrigin},updatePosition:function(){var e=(new THREE.Vector3).setFromMatrixPosition(this.matrixWorld);e.project(this.camera);var t=this.scene.labelDiv;e.x=(e.x+1)/2*t.offsetWidth,e.y=(1-(e.y+1)/2)*t.offsetHeight,this.div.style.left=e.x+"px",this.div.style.top=e.y+"px"}}),Object.assign(ObjectLoader.prototype,{load:function(e,t,r,n,i){""===this.texturePath&&(this.texturePath=e.substring(0,e.lastIndexOf("/")+1));var a=this,o=new FileLoader(a.manager);o.setRequestHeader({"Content-type":"application/json"}),o.load(e,function(r){var i=null;try{i=JSON.parse(r)}catch(t){return void 0!==n&&n(t),void console.error("AVS.Three.ObjectLoader: Can't parse "+e+".",t.message)}var o=i.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?a.parse(i,t):console.error("AVS.Three.ObjectLoader: Can't load "+e+". Use THREE.JSONLoader instead.")},r,n,i)},setTexturePath:function(e){return this.texturePath=e,this},setCrossOrigin:function(e){return this.crossOrigin=e,this},parse:function(e,t,r,n,i,a,o,s){var l=this.parseShape(e.shapes),c=this.parseGeometries(e.geometries,l,a),h=this.parseImages(e.images,function(){void 0!==t&&t(f)},r),u=this.parseTextures(e.textures,h,n),d=this.parseMaterials(e.materials,u,i),p=this.parseDataMaps(e.dataMaps,c,o),f=this.parseObject(e.object,c,d,p);return void 0!==s&&(s.add(f),f.saveVisible=f.visible,f.visible=!1),e.animations&&(f.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(f),f},parseShape:function(e){var t={};if(void 0!==e)for(var r=0,n=e.length;r<n;r++){var i=(new Shape).fromJSON(e[r]);t[i.uuid]=i}return t},parseGeometries:function(e,t,r){var n={};if(void 0!==r&&(n=r),void 0!==e)for(var i=new THREE.JSONLoader,a=new THREE.BufferGeometryLoader,o=new LinePatternBufferGeometryLoader(a),s=new ThickLineBufferGeometryLoader,l=0,c=e.length;l<c;l++){var h,u=e[l];switch(u.type){case"PlaneGeometry":case"PlaneBufferGeometry":h=new THREE.Geometries[u.type](u.width,u.height,u.widthSegments,u.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":h=new THREE.Geometries[u.type](u.width,u.height,u.depth,u.widthSegments,u.heightSegments,u.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":h=new THREE.Geometries[u.type](u.radius,u.segments,u.thetaStart,u.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":h=new THREE.Geometries[u.type](u.radiusTop,u.radiusBottom,u.height,u.radialSegments,u.heightSegments,u.openEnded,u.thetaStart,u.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":h=new THREE.Geometries[u.type](u.radius,u.height,u.radialSegments,u.heightSegments,u.openEnded,u.thetaStart,u.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":h=new THREE.Geometries[u.type](u.radius,u.widthSegments,u.heightSegments,u.phiStart,u.phiLength,u.thetaStart,u.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":h=new THREE.Geometries[u.type](u.radius,u.detail);break;case"RingGeometry":case"RingBufferGeometry":h=new THREE.Geometries[u.type](u.innerRadius,u.outerRadius,u.thetaSegments,u.phiSegments,u.thetaStart,u.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":h=new THREE.Geometries[u.type](u.radius,u.tube,u.radialSegments,u.tubularSegments,u.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":h=new THREE.Geometries[u.type](u.radius,u.tube,u.tubularSegments,u.radialSegments,u.p,u.q);break;case"LatheGeometry":case"LatheBufferGeometry":h=new THREE.Geometries[u.type](u.points,u.segments,u.phiStart,u.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":h=new THREE.Geometries[u.type](u.vertices,u.indices,u.radius,u.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var d=[],p=0,f=u.shapes.length;p<f;p++){var m=t[u.shapes[p]];d.push(m)}h=new THREE.Geometries[u.type](d,u.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(d=[],p=0,f=u.shapes.length;p<f;p++){m=t[u.shapes[p]];d.push(m)}var g=u.options.extrudePath;void 0!==g&&(u.options.extrudePath=(new THREE.Curves[g.type]).fromJSON(g)),h=new THREE.Geometries[u.type](d,u.options);break;case"BufferGeometry":h=a.parse(u);break;case"LinePatternBufferGeometry":h=o.parse(u);break;case"ThickLineBufferGeometry":h=s.parse(u);break;case"Geometry":h=i.parse(u,this.texturePath).geometry;break;default:console.warn('AVS.Three.ObjectLoader: Unsupported geometry type "'+u.type+'"');continue}h.uuid=u.uuid,void 0!==u.name&&(h.name=u.name),!0===h.isBufferGeometry&&void 0!==u.userData&&(h.userData=u.userData),n[u.uuid]=h}return n},parseMaterials:function(e,t,r){var n={};if(void 0!==r&&(n=r),void 0!==e){var i=new MaterialLoader;i.setTextures(t);for(var a=0,o=e.length;a<o;a++){var s=e[a];if("MultiMaterial"===s.type){for(var l=[],c=0;c<s.materials.length;c++)l.push(i.parse(s.materials[c]));n[s.uuid]=l}else n[s.uuid]=i.parse(s)}}return n},parseDataMaps:function(e,t,r){var n={};if(void 0!==r&&(n=r),void 0!==e)for(var i=new DataMapLoader,a=0,o=e.length;a<o;a++){var s=e[a];n[s.uuid]=i.parse(s,t)}return n},parseAnimations:function(e){for(var t=[],r=0;r<e.length;r++){var n=e[r],i=THREE.AnimationClip.parse(n);void 0!==n.uuid&&(i.uuid=n.uuid),t.push(i)}return t},parseImages:function(e,t,r){var n=this,i={};function a(e){return n.manager.itemStart(e),s.load(e,function(){n.manager.itemEnd(e)},void 0,function(){n.manager.itemEnd(e),n.manager.itemError(e)})}if(void 0!==r&&(i=r),void 0!==e&&e.length>0){var o=new THREE.LoadingManager(t),s=new THREE.ImageLoader(o);s.setCrossOrigin(this.crossOrigin);for(var l=0,c=e.length;l<c;l++){var h=e[l],u=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(h.url)?h.url:n.texturePath+h.url;i[h.uuid]=a(u)}}return i},parseTextures:function(e,t,r){function n(e,t){return"number"==typeof e?e:(console.warn("AVS.Three.ObjectLoader.parseTextures: Constant should be in numeric form.",e),t[e])}var i={};if(void 0!==r&&(i=r),void 0!==e)for(var a=0,o=e.length;a<o;a++){var s=e[a];void 0===s.image&&console.warn('AVS.Three.ObjectLoader: No "image" specified for',s.uuid),void 0===t[s.image]&&console.warn("AVS.Three.ObjectLoader: Undefined image",s.image);var l=new THREE.Texture(t[s.image]);l.needsUpdate=!0,l.uuid=s.uuid,void 0!==s.name&&(l.name=s.name),void 0!==s.mapping&&(l.mapping=n(s.mapping,TEXTURE_MAPPING)),void 0!==s.offset&&l.offset.fromArray(s.offset),void 0!==s.repeat&&l.repeat.fromArray(s.repeat),void 0!==s.center&&l.center.fromArray(s.center),void 0!==s.rotation&&(l.rotation=s.rotation),void 0!==s.wrap&&(l.wrapS=n(s.wrap[0],TEXTURE_WRAPPING),l.wrapT=n(s.wrap[1],TEXTURE_WRAPPING)),void 0!==s.format&&(l.format=s.format),void 0!==s.minFilter&&(l.minFilter=n(s.minFilter,TEXTURE_FILTER)),void 0!==s.magFilter&&(l.magFilter=n(s.magFilter,TEXTURE_FILTER)),void 0!==s.anisotropy&&(l.anisotropy=s.anisotropy),void 0!==s.flipY&&(l.flipY=s.flipY),i[s.uuid]=l}return i},parseObject:function(e,t,r,n){var i,a;function o(e){return void 0===t[e]&&console.warn("AVS.Three.ObjectLoader: Undefined geometry",e),t[e]}function s(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],n=0,i=e.length;n<i;n++){var a=e[n];void 0===r[a]&&console.warn("AVS.Three.ObjectLoader: Undefined material",a),t.push(r[a])}return t}return void 0===r[e]&&console.warn("AVS.Three.ObjectLoader: Undefined material",e),r[e]}}switch(e.type){case"Scene":i=new THREE.Scene,void 0!==e.background&&Number.isInteger(e.background)&&(i.background=new THREE.Color(e.background)),void 0!==e.fog&&("Fog"===e.fog.type?i.fog=new THREE.Fog(e.fog.color,e.fog.near,e.fog.far):"FogExp2"===e.fog.type&&(i.fog=new THREE.FogExp2(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":i=new THREE.PerspectiveCamera(e.fov,e.aspect,e.near,e.far),void 0!==e.focus&&(i.focus=e.focus),void 0!==e.zoom&&(i.zoom=e.zoom),void 0!==e.filmGauge&&(i.filmGauge=e.filmGauge),void 0!==e.filmOffset&&(i.filmOffset=e.filmOffset),void 0!==e.view&&(i.view=Object.assign({},e.view));break;case"OrthographicCamera":i=new THREE.OrthographicCamera(e.left,e.right,e.top,e.bottom,e.near,e.far);break;case"AmbientLight":i=new THREE.AmbientLight(e.color,e.intensity);break;case"DirectionalLight":i=new THREE.DirectionalLight(e.color,e.intensity);break;case"PointLight":i=new THREE.PointLight(e.color,e.intensity,e.distance,e.decay);break;case"SpotLight":i=new THREE.SpotLight(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"RectAreaLight":i=new THREE.RectAreaLight(e.color,e.intensity,e.width,e.height);break;case"HemisphereLight":i=new THREE.HemisphereLight(e.color,e.groundColor,e.intensity);break;case"SkinnedMesh":console.warn("AVS.Three.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":case"Quads":var l=o(e.geometry),c=s(e.material);(i=l.bones&&l.bones.length>0?new THREE.SkinnedMesh(l,c):new THREE.Mesh(l,c)).cellType="Quads"===e.type?CellTypeEnum.Quads:CellTypeEnum.Triangles;break;case"LOD":i=new THREE.LOD;break;case"Line":i=new THREE.Line(o(e.geometry),s(e.material),e.mode);break;case"LineLoop":i=new THREE.LineLoop(o(e.geometry),s(e.material));break;case"LineSegments":(i=new THREE.LineSegments(o(e.geometry),s(e.material))).cellType=CellTypeEnum.Lines;break;case"ThickLineSegments":(i=new ThickLineSegments(o(e.geometry),s(e.material))).cellType=CellTypeEnum.Quads;break;case"PointCloud":case"Points":(i=new THREE.Points(o(e.geometry),s(e.material))).cellType=CellTypeEnum.Points;break;case"Sprite":i=new THREE.Sprite(s(e.material));break;case"Group":i=new THREE.Group,"Scenes"===e.name&&(i.dataMaps=n);break;case"BillboardText":i=new BillboardText,void 0!==e.text&&(i.text=e.text),void 0!==e.fontSize&&(i.fontSize=e.fontSize),void 0!==e.italic&&(i.italic=e.italic),void 0!==e.bold&&(i.bold=e.bold),void 0!==e.fontFamily&&(i.fontFamily=e.fontFamily),void 0!==e.color&&i.color.setHex(e.color),void 0!==e.textAlign&&(i.textAlign=e.textAlign),void 0!==e.transform&&(i.transform=e.transform),void 0!==e.transformOrigin&&(i.transformOrigin=e.transformOrigin);break;default:i=new THREE.Object3D}if(i.uuid=e.uuid,void 0!==e.name&&(i.name=e.name),void 0!==e.matrix?(i.matrix.fromArray(e.matrix),void 0!==e.matrixAutoUpdate&&(i.matrixAutoUpdate=e.matrixAutoUpdate),i.matrixAutoUpdate&&i.matrix.decompose(i.position,i.quaternion,i.scale)):(void 0!==e.position&&i.position.fromArray(e.position),void 0!==e.rotation&&i.rotation.fromArray(e.rotation),void 0!==e.quaternion&&i.quaternion.fromArray(e.quaternion),void 0!==e.scale&&i.scale.fromArray(e.scale)),void 0!==e.castShadow&&(i.castShadow=e.castShadow),void 0!==e.receiveShadow&&(i.receiveShadow=e.receiveShadow),e.shadow&&(void 0!==e.shadow.bias&&(i.shadow.bias=e.shadow.bias),void 0!==e.shadow.radius&&(i.shadow.radius=e.shadow.radius),void 0!==e.shadow.mapSize&&i.shadow.mapSize.fromArray(e.shadow.mapSize),void 0!==e.shadow.camera&&(i.shadow.camera=this.parseObject(e.shadow.camera))),void 0!==e.visible&&(i.visible=e.visible),void 0!==e.frustumCulled&&(i.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(i.renderOrder=e.renderOrder),void 0!==e.userData&&(i.userData=e.userData,void 0!==i.userData.dataMaps)){var h=i.userData.dataMaps;for(var u in h)h.hasOwnProperty(u)&&(h[u]=(a=h[u],void 0===n[a]&&console.warn("AVS.Three.ObjectLoader: Undefined dataMap",a),n[a]))}if(void 0!==e.children)for(var d=e.children,p=0;p<d.length;p++)i.add(this.parseObject(d[p],t,r,n));if("LOD"===e.type)for(var f=e.levels,m=0;m<f.length;m++){var g=f[m],v=i.getObjectByProperty("uuid",g.object);void 0!==v&&i.addLevel(v,g.distance)}return i}});var TEXTURE_MAPPING={UVMapping:THREE.UVMapping,CubeReflectionMapping:THREE.CubeReflectionMapping,CubeRefractionMapping:THREE.CubeRefractionMapping,EquirectangularReflectionMapping:THREE.EquirectangularReflectionMapping,EquirectangularRefractionMapping:THREE.EquirectangularRefractionMapping,SphericalReflectionMapping:THREE.SphericalReflectionMapping,CubeUVReflectionMapping:THREE.CubeUVReflectionMapping,CubeUVRefractionMapping:THREE.CubeUVRefractionMapping},TEXTURE_WRAPPING={RepeatWrapping:THREE.RepeatWrapping,ClampToEdgeWrapping:THREE.ClampToEdgeWrapping,MirroredRepeatWrapping:THREE.MirroredRepeatWrapping},TEXTURE_FILTER={NearestFilter:THREE.NearestFilter,NearestMipMapNearestFilter:THREE.NearestMipMapNearestFilter,NearestMipMapLinearFilter:THREE.NearestMipMapLinearFilter,LinearFilter:THREE.LinearFilter,LinearMipMapNearestFilter:THREE.LinearMipMapNearestFilter,LinearMipMapLinearFilter:THREE.LinearMipMapLinearFilter};function ViewerLayout(e,t){this.scenes=[void 0!==e?e:new THREE.Scene],this.type=void 0!==t?t:"3D"}function Viewer(e,t,r){var n=e;this.getID=function(){return n},this.pixelRatio=void 0!==r?r:window.devicePixelRatio,this.mainCanvas=document.createElement("canvas"),this.mainCanvas.style.position="absolute",this.mainCanvas.style.width="100%",this.mainCanvas.style.height="100%",this.mainCanvas.id="mainCanvas",this.mainCtx=this.mainCanvas.getContext("2d"),this.highlightCanvas=document.createElement("canvas"),this.highlightCanvas.style.position="absolute",this.highlightCanvas.style.width="100%",this.highlightCanvas.style.height="100%",this.highlightCanvas.id="highlightCanvas",this.highlightCtx=this.highlightCanvas.getContext("2d"),this.labelContainer=document.createElement("div"),this.labelContainer.style.position="absolute",this.labelContainer.style.overflow="hidden",this.labelContainer.style.width="100%",this.labelContainer.style.height="100%",this.labelContainer.id="labelDiv",this.rectCanvas=document.createElement("canvas"),this.rectCanvas.style.position="absolute",this.rectCanvas.style.overflow="hidden",this.rectCanvas.style.width="100%",this.rectCanvas.style.height="100%",this.rectCanvas.class="rectangle",this.rectCanvas.id="rectCanvas",this.rectCtx=this.rectCanvas.getContext("2d"),this.rect={},this.drag=!1,this.container=document.createElement("div"),this.container.style.position="relative",this.container.style.overflow="hidden",this.container.appendChild(this.mainCanvas),this.container.appendChild(this.highlightCanvas),this.container.appendChild(this.labelContainer),this.container.appendChild(this.rectCanvas),this.container.id="topLevelDiv",this.scenes=[],this.currentScene=null,this.startCell=1,this.controls=[],this.ray=new THREE.Raycaster,this.ray.linePrecision=.001,this.ray.params.Points.threshold=.02,this.mouse=new THREE.Vector2,this.mouseUp=!1,this.mouseDown=!1,this.mouseDownCoords={},this.mouseUpCoords={},this.selectedCubes=null,this.pickDepth=PickDepthEnum.Closest,this.updatePicking=!1,this.pickingTexture=new THREE.WebGLRenderTarget,this.pickingTexture2=new THREE.WebGLRenderTarget,this.useSecondTexture=!1,this.pickState=new Float32Array(1),this.resolution=new THREE.Vector2,this.loading=!1,this.cancelLoad=!1}function TransformInteractor(e){this.camera=null,this.scene=null,this.sceneNodeName=null,this.domElement=void 0!==e?e:document,this.sceneNode=new THREE.Object3D,this.enabled=!0,this.target=new THREE.Vector3,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!1,this.keyPanSpeed=7,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:THREE.MOUSE.LEFT,ZOOM:THREE.MOUSE.MIDDLE,PAN:THREE.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.sceneNode.position.clone(),this.zoom0=this.sceneNode.zoom,this.setSceneNodeByName=function(e){t.sceneNodeName=e,null!==t.scene&&(t.sceneNode=t.scene.getObjectByName(e))},this.saveState=function(){t.target0.copy(t.target),t.position0.copy(t.sceneNode.position),t.zoom0=t.sceneNode.zoom},this.reset=function(){t.target.copy(t.target0),t.sceneNode.position.copy(t.position0),t.sceneNode.zoom=t.zoom0,t.sceneNode.updateProjectionMatrix(),t.dispatchEvent(r),t.update(),o=a.NONE},this.update=function(){var e=t.sceneNode.quaternion.clone().inverse();h.applyQuaternion(e),l*=c,t.sceneNode.position.add(h);var r=(new THREE.Quaternion).setFromEuler(new THREE.Euler(s.phi,s.theta,0,"XYZ"));t.sceneNode.quaternion.premultiply(r),t.sceneNode.scale.setScalar(l),s.set(0,0,0),c=1,h.set(0,0,0)},this.dispose=function(){t.domElement.removeEventListener("contextmenu",B,!1),t.domElement.removeEventListener("mousedown",k,!1),t.domElement.removeEventListener("wheel",H,!1),t.domElement.removeEventListener("touchstart",A,!1),t.domElement.removeEventListener("touchend",O,!1),t.domElement.removeEventListener("touchmove",N,!1),document.removeEventListener("mousemove",D,!1),document.removeEventListener("mouseup",P,!1),window.removeEventListener("keydown",V,!1)};var t=this,r={type:"change"},n={type:"start"},i={type:"end"},a={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY_PAN:4},o=a.NONE,s=new THREE.Spherical,l=1,c=1,h=new THREE.Vector3,u=new THREE.Vector2,d=new THREE.Vector2,p=new THREE.Vector2,f=new THREE.Vector2,m=new THREE.Vector2,g=new THREE.Vector2,v=new THREE.Vector2,E=new THREE.Vector2,y=new THREE.Vector2;function b(){return Math.pow(.95,t.zoomSpeed)}function T(e){s.theta+=e}function S(e){s.phi+=e}var w,C,R=(w=new THREE.Vector3,function(e,t){w.setFromMatrixColumn(t,0),w.multiplyScalar(e),h.add(w)}),M=function(){var e=new THREE.Vector3;return function(r,n){!0===t.screenSpacePanning?e.setFromMatrixColumn(n,1):(e.setFromMatrixColumn(n,0),e.crossVectors(t.object.up,e)),e.multiplyScalar(-r),h.add(e)}}(),_=(C=new THREE.Vector3,function(e,r){var n=t.domElement===document?t.domElement.body:t.domElement;if(t.camera.isPerspectiveCamera){var i=t.camera.position;C.copy(i).sub(t.target);var a=C.length();a*=Math.tan(t.camera.fov/2*Math.PI/180),R(2*e*a/n.clientHeight,t.sceneNode.matrix),M(2*r*a/n.clientHeight,t.sceneNode.matrix)}else t.camera.isOrthographicCamera?(R(e*(t.camera.right-t.camera.left)/t.camera.zoom/n.clientWidth,t.sceneNode.matrix),M(r*(t.camera.top-t.camera.bottom)/t.camera.zoom/n.clientHeight,t.sceneNode.matrix)):(console.warn("WARNING: AVS.Three.TransformInteractor encountered an unknown camera type - pan disabled."),t.enablePan=!1)});function x(e){l*=e}function L(e){l/=e}function k(e){if(!1!==t.enabled){switch(e.preventDefault(),e.button){case t.mouseButtons.ORBIT:if(!1===t.enableRotate)return;!function(e){u.set(e.clientX,e.clientY)}(e),o=a.ROTATE;break;case t.mouseButtons.ZOOM:if(!1===t.enableZoom)return;!function(e){v.set(e.clientX,e.clientY)}(e),o=a.DOLLY;break;case t.mouseButtons.PAN:if(!1===t.enablePan)return;!function(e){f.set(e.clientX,e.clientY)}(e),o=a.PAN}o!==a.NONE&&(document.addEventListener("mousemove",D,!1),document.addEventListener("mouseup",P,!1),t.dispatchEvent(n))}}function D(e){if(!1!==t.enabled)switch(e.preventDefault(),o){case a.ROTATE:if(!1===t.enableRotate)return;!function(e){d.set(e.clientX,e.clientY),p.subVectors(d,u).multiplyScalar(t.rotateSpeed);var r=t.domElement===document?t.domElement.body:t.domElement;T(2*Math.PI*p.x/r.clientHeight),S(2*Math.PI*p.y/r.clientHeight),u.copy(d),t.update()}(e);break;case a.DOLLY:if(!1===t.enableZoom)return;!function(e){E.set(e.clientX,e.clientY),y.subVectors(E,v),y.y>0?x(b()):y.y<0&&L(b()),v.copy(E),t.update()}(e);break;case a.PAN:if(!1===t.enablePan)return;!function(e){m.set(e.clientX,e.clientY),g.subVectors(m,f).multiplyScalar(t.panSpeed),_(g.x,g.y),f.copy(m),t.update()}(e)}}function P(e){!1!==t.enabled&&(document.removeEventListener("mousemove",D,!1),document.removeEventListener("mouseup",P,!1),t.dispatchEvent(i),o=a.NONE)}function H(e){!1===t.enabled||!1===t.enableZoom||o!==a.NONE&&o!==a.ROTATE||(e.preventDefault(),e.stopPropagation(),t.dispatchEvent(n),function(e){e.deltaY<0?L(b()):e.deltaY>0&&x(b()),t.update()}(e),t.dispatchEvent(i))}function V(e){!1!==t.enabled&&!1!==t.enableKeys&&!1!==t.enablePan&&function(e){switch(e.keyCode){case t.keys.UP:_(0,t.keyPanSpeed),t.update();break;case t.keys.BOTTOM:_(0,-t.keyPanSpeed),t.update();break;case t.keys.LEFT:_(t.keyPanSpeed,0),t.update();break;case t.keys.RIGHT:_(-t.keyPanSpeed,0),t.update()}}(e)}function A(e){if(!1!==t.enabled){switch(e.preventDefault(),e.touches.length){case 1:if(!1===t.enableRotate)return;!function(e){u.set(e.touches[0].pageX,e.touches[0].pageY)}(e),o=a.TOUCH_ROTATE;break;case 2:if(!1===t.enableZoom&&!1===t.enablePan)return;!function(e){if(t.enableZoom){var r=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(r*r+n*n);v.set(0,i)}if(t.enablePan){var a=.5*(e.touches[0].pageX+e.touches[1].pageX),o=.5*(e.touches[0].pageY+e.touches[1].pageY);f.set(a,o)}}(e),o=a.TOUCH_DOLLY_PAN;break;default:o=a.NONE}o!==a.NONE&&t.dispatchEvent(n)}}function N(e){if(!1!==t.enabled)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(!1===t.enableRotate)return;if(o!==a.TOUCH_ROTATE)return;!function(e){d.set(e.touches[0].pageX,e.touches[0].pageY),p.subVectors(d,u).multiplyScalar(t.rotateSpeed);var r=t.domElement===document?t.domElement.body:t.domElement;T(2*Math.PI*p.x/r.clientHeight),S(2*Math.PI*p.y/r.clientHeight),u.copy(d),t.update()}(e);break;case 2:if(!1===t.enableZoom&&!1===t.enablePan)return;if(o!==a.TOUCH_DOLLY_PAN)return;!function(e){if(t.enableZoom){var r=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(r*r+n*n);E.set(0,i),y.set(0,Math.pow(E.y/v.y,t.zoomSpeed)),x(y.y),v.copy(E)}if(t.enablePan){var a=.5*(e.touches[0].pageX+e.touches[1].pageX),o=.5*(e.touches[0].pageY+e.touches[1].pageY);m.set(a,o),g.subVectors(m,f).multiplyScalar(t.panSpeed),_(g.x,g.y),f.copy(m)}t.update()}(e);break;default:o=a.NONE}}function O(e){!1!==t.enabled&&(t.dispatchEvent(i),o=a.NONE)}function B(e){!1!==t.enabled&&e.preventDefault()}t.domElement.addEventListener("contextmenu",B,!1),t.domElement.addEventListener("mousedown",k,!1),t.domElement.addEventListener("wheel",H,!1),t.domElement.addEventListener("touchstart",A,!1),t.domElement.addEventListener("touchend",O,!1),t.domElement.addEventListener("touchmove",N,!1),window.addEventListener("keydown",V,!1),this.update()}ViewerLayout.DEFAULT_BACKGROUND_COLOR=new THREE.Color(16776960),ViewerLayout.prototype={constructor:ViewerLayout,getScenes:function(){return this.scenes},addScene:function(e){"Scene"!==e.type&&console.error("AVSTHREE: Could not find scene object.  Your top level object must be of type Scene",this),this.scenes.push(e)},setLayout:function(e){this.scenes=[],void 0!==e.background&&(this.background=e.background);for(var t=0;t<e.children.length;t++)this.addScene(e.children[t])},initDefault:function(){if(this.scenes[0].userData={},"3D"===this.type){this.scenes[0].userData.is3D=!0,(t=new THREE.PerspectiveCamera(50,1,1,2e3)).position.z=4,this.scenes[0].add(t),this.scenes[0].add(new THREE.AmbientLight(16777215,.31));var e=new THREE.DirectionalLight(16777215,.7);e.position.set(1,1,1).normalize(),this.scenes[0].add(e)}else{var t;this.scenes[0].userData.is3D=!1,(t=new THREE.OrthographicCamera(-1,1,1,-1)).position.z=4,this.scenes[0].add(t)}this.background=ViewerLayout.DEFAULT_BACKGROUND_COLOR},setBackgroundColor:function(e){this.background=e},getBackgroundColor:function(){return this.background},getCamera:function(e){for(var t=0;t<e.children.length;t++){var r=e.children[t];if("PerspectiveCamera"===r.type||"OrthographicCamera"===r.type){var n=r;break}}return n},loadAsJson:function(e){var t=(new ObjectLoader).parse(e);this.setLayout(t)},loadAsUrl:function(e){var t=this;(new ObjectLoader).load(e.url,function(r){t.setLayout(r),void 0!=e.success&&e.success()},e.progress,e.error,e.jsonRequest)}},Viewer.prototype={constructor:Viewer,setBackgroundColor:function(e){this.background=e},setWebGLRenderer:function(e){this.renderer=e,this.renderer.setPixelRatio(this.pixelRatio),this.renderer.localClippingEnabled=!0,this.renderer.sortObjects=!1},getDataMaps:function(){return this.dataMaps},getCamera:function(e){for(var t=0;t<e.children.length;t++){var r=e.children[t];if("PerspectiveCamera"===r.type||"OrthographicCamera"===r.type){var n=r;break}}return n},getCanvas:function(){return this.container},getRectangleContext:function(){return this.rectCtx},setSize:function(e,t){this.width=e,this.height=t,this.container.style.width=e+"px",this.container.style.height=t+"px",this.mainCanvas.width=e,this.mainCanvas.height=t,this.highlightCanvas.width=e,this.highlightCanvas.height=t,this.pickingTexture.setSize(e,t),this.pixelBuffer=new Uint8Array(4*e*t),this.useSecondTexture&&(this.pickingTexture2.setSize(e,t),this.pixelBuffer2=new Uint8Array(4*e*t)),this.updatePicking=!0,this.rectCanvas.width=this.width,this.rectCanvas.height=this.height;for(var r=0;r<this.scenes.length;r++)this.updateSceneLabelDivPosition(this.scenes[r])},updateSceneLabelDivPosition:function(e){var t=e.labelDiv;void 0!==e.userData.left&&void 0!==e.userData.top&&void 0!==e.userData.width&&void 0!==e.userData.height?(t.style.left=Math.floor(this.width*e.userData.left)+"px",t.style.width=Math.floor(this.width*e.userData.width)+"px",t.style.top=Math.floor(this.height*e.userData.top)+"px",t.style.height=Math.floor(this.height*e.userData.height)+"px"):(t.style.width=this.width+"px",t.style.height=this.height+"px")},clearGeometry:function(){for(;this.labelContainer.lastChild;)this.labelContainer.removeChild(this.labelContainer.lastChild);this.scenes=[]},setPickDepth:function(e){void 0===e&&(e=PickDepthEnum.Closest),this.pickDepth=e},addInteractor:function(e){var t=this;this.controls.push(e),e.addEventListener("end",function(){t.updatePicking=!0}),this.animate()},connectInteractor:function(e){for(var t=0;t<this.controls.length;t++){var r=this.controls[t];r.sceneNodeName===e.name&&(r.sceneNode=e,r.scene=this.currentScene,r.camera=this.getCamera(this.currentScene))}},connectInteractors:function(){for(var e=0;e<this.controls.length;e++)for(var t=this.controls[e],r=0;r<this.scenes.length;r++){var n=this.scenes[r],i=n.getObjectByName(t.sceneNodeName);if(void 0!==i){t.sceneNode=i,t.scene=n,t.camera=this.getCamera(n);break}}},addGeometry:function(e){if("Scenes"===e.name){for(var t=0;t<e.children.length;t++)this.addScene(e.children[t]);this.dataMaps=e.dataMaps}this.connectInteractors()},addScene:function(e){if(e instanceof THREE.Scene){this.scenes.push(e),this.currentScene=e,e.labels=[];var t=document.createElement("div");t.style.position="absolute",t.style.overflow="hidden",t.id="sceneLabelDiv",e.labelDiv=t,this.labelContainer.appendChild(t),this.updateSceneLabelDivPosition(e),this.addLabels(e),this.createPickingInfo(e),e.highlightScene=new THREE.Scene,e.highlightScene.add(new THREE.Group);for(var r=0;r<e.children.length;r++)!0===e.children[r].isLight&&e.highlightScene.add(e.children[r].clone())}},createPickingInfo:function(e){var t=this;e.traverse(function(e){if(void 0!==e.geometry){if(void 0===e.geometry.attributes.cellCount){var r,n;if(e.isThickLineSegments){var i=(s=e.geometry.attributes.positionStart.array.length/3)/2;n=s;for(var a=new Float32Array(i),o=0;o<i;o++)a[o]=2*o;r=new THREE.InstancedBufferAttribute(a,1)}else{var s,l=1;e.isPoints?l=1:e.isLineSegments?l=2:e.isMesh&&(l=3),n=(s=e.geometry.attributes.position.array.length/3)/l,r=new THREE.Float32BufferAttribute(s,1);for(o=0;o<n;o++)for(var c=0;c<l;c++)r.array[o*l+c]=o}e.geometry.addAttribute("cellCount",r),e.geometry.nCells=n}e.nCells=e.geometry.nCells,e.startCell=t.startCell,e.onBeforeRender=function(e,t,r,n,i,a){i.uniforms.startCell.value=this.startCell;var o=e.properties.get(i);if(o.program){var s=e.getContext();s.useProgram(o.program.program),o.program.getUniforms().setValue(s,"startCell",this.startCell)}},t.startCell+=e.nCells,!t.useSecondTexture&&t.startCell>16777215&&(t.pickingTexture2.setSize(t.width,t.height),t.pixelBuffer2=new Uint8Array(4*t.width*t.height),t.useSecondTexture=!0),t.updatePicking=!0}})},addLabels:function(e){var t=this;e.traverse(function(e){"BillboardText"===e.type?e.setSceneCamera(t.currentScene,t.getCamera(t.currentScene)):void 0!==e.material&&(e.material.pickState=t.pickState,void 0!==e.material.isLineBasicMaterial&&(e.material.resolution=t.resolution))})},loadGeometryAsJson:function(e){var t=(new ObjectLoader).parse(e);this.addGeometry(t)},loadGeometryAsUrl:function(e){if(void 0===e.jsonRequest.streamProperties||"CHUNK"!==e.jsonRequest.streamProperties.type)if(void 0===e.jsonRequest.streamProperties||"OBOE_STREAM"!==e.jsonRequest.streamProperties.type){var t=this;!0===this.loading&&(this.cancelLoad=!0),this.loading=!0,(new ObjectLoader).load(e.url,function(r){!1===t.cancelLoad&&(t.clearGeometry(),t.addGeometry(r),t.loading=!1,void 0!=e.success&&e.success()),t.cancelLoad=!1},e.progress,e.error,e.jsonRequest)}else this.loadGeometryAsUrlStream(e);else this.loadGeometryAsUrlChunk(e)},loadGeometryAsUrlChunk:function(e){var t,r=this,n={},i=[],a=new ObjectLoader,o=new FileLoader(r.manager);void 0!==e.render&&e.render;var s={},l={},c={},h={},u=0,d=-1,p=0,f=0;function m(t){f--,t.visible=t.saveVisible,r.addLabels(t),r.createPickingInfo(t),void 0!=e.success&&d>0&&0==f?e.success():p++}function g(o){if("Group"===o.type){var d=a.parse(o);"SceneRoot"===d.userData.type?r.connectSceneRoot(d):void 0!==t&&(t.add(d),r.connectInteractor(d)),i.push(d),t=d}else if("FinishGroup"===o.type){var p=i.pop();t=i.length>0?i[i.length-1]:p}else if("Geometry"===o.type)f++,a.parse(o,m,s,l,c,h,n,t),u++;else if("Layout"===o.type){var g=a.parse(o);r.addScene(g),r.currentScene=g,t=g}else console.log("ERROR: unknown type: "+o.type);void 0!=e.progress&&e.progress()}!0!==this.loading&&(this.loading=!0,this.clearGeometry(),function t(n,i){o.setRequestHeader({"Content-type":"application/json"}),o.load(n,function(a){var o=null;try{o=JSON.parse(a)}catch(t){return void 0!==e.error&&e.error(t),void console.error("AVS.Three.Viewer.loadGeometryAsUrlChunk: Can't parse chunk "+n+".",t.message)}if(void 0!==o.events){console.log("Events in chunk = "+o.events.length);for(var s=0;s<o.events.length;s++)g(o.events[s]);void 0!==i.streamProperties.streamUpdate&&i.streamProperties.streamUpdate(p),!0===o.moreChunks?(i.streamProperties.chunkId=o.chunkId,t(n,i)):(d=u-1,r.loading=!1,void 0!=e.success&&0==f&&e.success())}else console.error("AVS.Three.Viewer.loadGeometryAsUrlChunk: Can't get events from "+n)},void 0,e.error,i)}(e.url,e.jsonRequest))},loadGeometryAsUrlStream:function(e){var t,r=this,n={},i=[],a=new ObjectLoader;void 0!==e.render&&e.render;var o={},s={},l={},c={},h=0,u=-1,d=0,p=0;function f(t){p--,t.visible=t.saveVisible,r.addLabels(t),r.createPickingInfo(t),void 0!=e.success&&u>0&&0==p?e.success():(void 0!=e.streamUpdate&&void 0!==e.streamUpdateStep&&(d===e.streamUpdateFirst||d>0&&d%e.streamUpdateStep==0)&&e.streamUpdate(d),d++)}oboe(e.url).fail(function(t){void 0!=e.error&&e.error()}).done(function(){u=h-1,void 0!=e.success&&0==p&&e.success()}).node("events.*",function(u){if("Group"===u.type){var d=a.parse(u);"SceneRoot"===d.userData.type?r.connectSceneRoot(d):void 0!==t&&(t.add(d),r.connectInteractor(d)),i.push(d),t=d}else if("FinishGroup"===u.type){var m=i.pop();t=i.length>0?i[i.length-1]:m}else if("Geometry"===u.type)p++,a.parse(u,f,o,s,l,c,n,t),h++;else if("Layout"===u.type){var g=a.parse(u);r.addScene(g),r.currentScene=g,t=g}else console.log("ERROR: unknown type: "+u.type);return void 0!=e.progress&&e.progress(),oboe.drop})},findDataMap:function(e,t){for(var r=e.parent;void 0!==r&&null!==r;){if(void 0!==r.userData&&void 0!==r.userData.dataMaps){var n=r.userData.dataMaps;if(n.hasOwnProperty(t))return n[t]}r=r.parent}},cleanDataMaps:function(e){if(void 0!==e)for(var t in e)e.hasOwnProperty(t)&&e[t].setDirty(!1)},evaluateDataMaps:function(e){if(void 0!==e.userData.cellSetData&&void 0!=e.userData.cellSetData.dataMapSourceValues){if(void 0!==(o=e.userData.cellSetData.dataMapSourceValues)){var t=o.color;if(void 0!==t)if(void 0!==(s=this.findDataMap(e,"color"))&&s.isDirty())void 0!==(p=s.evaluate(t))?(e.material.color=p,e.material.colorWrite=!0):e.material.colorWrite=!1;var r=o.size;if(void 0!==r)if(void 0!==(s=this.findDataMap(e,"size"))&&s.isDirty()){var n=s.evaluate(r);e.material.colorWrite=void 0!==n}var i=o.shape;if(void 0!==i)if(void 0!==(s=this.findDataMap(e,"shape"))&&s.isDirty()){var a=s.evaluate(i);void 0!==a?(e.geometry=a,e.material.colorWrite=!0):e.material.colorWrite=!1}}}else if(void 0!==e.userData.cellData&&void 0!=e.userData.cellData.dataMapSourceValues){var o;if(void 0!==(o=e.userData.cellData.dataMapSourceValues)){var s,l=o.color;if(void 0!==l)if(void 0!==(s=this.findDataMap(e,"color"))&&s.isDirty()){for(var c=null,h=null,u=e.geometry.attributes.color,d=0;d<l.length;d++){var p=s.evaluate(l[d]);if(e.cellType===AVS.Three.CellTypeEnum.Points?(c=3*d,h=1):e.cellType===AVS.Three.CellTypeEnum.Lines?(c=6*d,h=2):(e.cellType,AVS.Three.CellTypeEnum.Triangles,c=9*d,h=3),void 0!==p)for(var f=0;f<h;f++)u.array[c++]=p.r,u.array[c++]=p.g,u.array[c++]=p.b;else for(f=0;f<h;f++)u.array[c++]=void 0,u.array[c++]=void 0,u.array[c++]=void 0}u.needsUpdate=!0}}}for(d=0;d<e.children.length;d++)this.evaluateDataMaps(e.children[d])},highlightRender:function(){if(void 0!==this.renderer){this.renderer.setClearColor(0,0),this.renderer.setSize(this.width,this.height);for(var e=this.scenes.length-1;e>=0;e--){var t=this.scenes[e];if(!(t.highlightScene.children[0].children.length<1)){var r=this.getCamera(t);if(void 0!==r){if(void 0!==t.userData.left&&void 0!==t.userData.top&&void 0!==t.userData.width&&void 0!==t.userData.height){var n=Math.floor(this.width*t.userData.left),i=Math.floor(this.height*t.userData.top),a=Math.floor(this.width*t.userData.width),o=Math.floor(this.height*t.userData.height);this.renderer.setViewport(n,i,a,o),this.renderer.setScissor(n,i,a,o),this.renderer.setScissorTest(!0),r.aspect=a/o,this.resolution.x=a,this.resolution.y=o}else r.aspect=this.width/this.height,this.resolution.x=this.width,this.resolution.y=this.height;r.updateProjectionMatrix(),this.renderer.render(t.highlightScene,r)}}}this.highlightCtx.clearRect(0,0,this.width,this.height),this.highlightCtx.drawImage(this.renderer.domElement,0,0)}else console.error("WebGLRenderer not set")},render:function(){if(void 0!==this.renderer){void 0!==this.background?this.renderer.setClearColor(this.background,1):this.renderer.setClearColor(0,0),this.renderer.setSize(this.width,this.height);for(var e=this.scenes.length-1;e>=0;e--){var t=this.scenes[e],r=this.getCamera(t);if(void 0!==r){if(this.evaluateDataMaps(t),void 0!==t.userData.left&&void 0!==t.userData.top&&void 0!==t.userData.width&&void 0!==t.userData.height){var n=Math.floor(this.width*t.userData.left),i=Math.floor(this.height*t.userData.top),a=Math.floor(this.width*t.userData.width),o=Math.floor(this.height*t.userData.height);if(this.renderer.setViewport(n,i,a,o),this.renderer.setScissor(n,i,a,o),this.renderer.setScissorTest(!0),this.updatePicking){var s=this.height-Math.floor(o+this.height*t.userData.top),l=new THREE.Vector4(n,s,a,o);this.pickingTexture.viewport=l,this.pickingTexture.scissor=l,this.pickingTexture.scissorTest=!0,this.useSecondTexture&&(this.pickingTexture2.viewport=l,this.pickingTexture2.scissor=l,this.pickingTexture2.scissorTest=!0)}r.aspect=a/o,this.resolution.x=a,this.resolution.y=o}else r.aspect=this.width/this.height,this.resolution.x=this.width,this.resolution.y=this.height;r.updateProjectionMatrix(),this.renderer.render(t,r),this.updatePicking&&(this.pickState[0]=1,this.renderer.render(t,r,this.pickingTexture),this.useSecondTexture&&(this.pickState[0]=2,this.renderer.render(t,r,this.pickingTexture2))),this.pickState[0]=0;for(var c=0;c<t.labels.length;c++)t.labels[c].updatePosition()}}this.mainCtx.drawImage(this.renderer.domElement,0,0),this.cleanDataMaps(this.getDataMaps()),this.updatePicking&&(this.renderer.readRenderTargetPixels(this.pickingTexture,0,0,this.width,this.height,this.pixelBuffer),this.useSecondTexture&&this.renderer.readRenderTargetPixels(this.pickingTexture2,0,0,this.width,this.height,this.pixelBuffer2),this.updatePicking=!1),this.highlightRender()}else console.error("WebGLRenderer not set")},release:function(){this.renderer.forceContextLoss(),this.renderer=null},animate:function(){requestAnimationFrame(this.animate.bind(this));for(var e=0;e<this.controls.length;e++)this.controls[e].update();this.render()},addPickListener:function(e){void 0!==e&&(this.pick=e,this.pick.level=void 0!==e.level?e.level:PickLevelEnum.CellSet,this.pick.highlight=void 0===e.highlight||e.highlight,this.pick.depth=void 0!==e.depth?e.depth:this.pickDepth,this.pick.active=!0===this.pick.highlight||void 0!==this.pick.onPick,this.pick.highlightHexColor=void 0!==e.highlightHexColor?e.highlightHexColor:16776960,this.pick.onSelect=e.onPick,this.pick.INTERSECTED=[],this.pick.active&&(this.container.addEventListener("mousedown",this.onDocumentMouseDown.bind(this),!1),this.container.addEventListener("touchstart",this.onTouchStart.bind(this),!1)))},addHoverListener:function(e){void 0!==e&&(this.hover=e,this.hover.level=void 0!==e.level?e.level:PickLevelEnum.CellSet,this.hover.highlight=void 0===e.highlight||e.highlight,this.hover.depth=void 0!==e.depth?e.depth:this.pickDepth,this.hover.active=!0===this.hover.highlight||void 0!==this.hover.onHover,this.hover.highlightHexColor=void 0!==e.highlightHexColor?e.highlightHexColor:16776960,this.hover.onSelect=e.onHover,this.hover.INTERSECTED=[],this.hover.active&&(this.container.addEventListener("mousemove",this.onDocumentMouseMove.bind(this),!1),this.container.addEventListener("touchstart",this.onTouchStart.bind(this),!1)))},addRectanglePickListener:function(e){void 0!==e&&(this.pickRectangle=e,this.pickRectangle.level=void 0!==e.level?e.level:PickLevelEnum.CellSet,this.pickRectangle.highlight=void 0===e.highlight||e.highlight,this.pickRectangle.depth=void 0!==e.depth?e.depth:this.pickDepth,this.pickRectangle.active=!0===this.pickRectangle.highlight||void 0!==this.pickRectangle.onPick,this.pickRectangle.highlightHexColor=void 0!==e.highlightHexColor?e.highlightHexColor:16776960,this.pickRectangle.onSelect=e.onPick,this.pickRectangle.style=void 0!==e.style?e.style:this.rectangleStyle,this.pickRectangle.INTERSECTED=[],this.pickRectangle.isRectangle=!0,this.pickRectangle.active&&(this.container.addEventListener("mousedown",this.onDocumentMouseDown.bind(this),!1),this.container.addEventListener("mouseup",this.onDocumentMouseUp.bind(this),!1),this.container.addEventListener("mousemove",this.onDocumentMouseMove.bind(this),!0),this.container.addEventListener("touchstart",this.onTouchStart.bind(this),!1),this.container.addEventListener("touchend",this.onTouchEnd.bind(this),!1),this.container.addEventListener("touchmove",this.onTouchMove.bind(this),!1)))},rectangleStyle:function(e){e.setLineDash([6]),e.strokeStyle="#ff0000"},drawRect:function(){this.pickRectangle.style(this.rectCtx),this.rectCtx.strokeRect(this.rect.startX,this.rect.startY,this.rect.w,this.rect.h)},removeAllPickAndHoverListeners:function(){this.container.removeEventListener("mousedown",this.onDocumentMouseDown,!1),this.container.removeEventListener("mouseup",this.onDocumentMouseUp,!1),this.container.removeEventListener("mousemove",this.onDocumentMouseMove,!1),this.container.removeEventListener("touchstart",this.onTouchStart.bind(this),!1),this.container.removeEventListener("touchend",this.onTouchEnd.bind(this),!1),this.container.removeEventListener("touchmove",this.onTouchMove.bind(this),!1)},cursorPositionInCanvas:function(e,t){var r=void 0!==t&&t,n=e.target.getBoundingClientRect(),i={top:n.top+document.body.scrollTop,left:n.left+document.body.scrollLeft};return[(r?e.touches[0].clientX:e.clientX)+document.body.scrollLeft+document.documentElement.scrollLeft-Math.floor(i.left),(r?e.touches[0].clientY:e.clientY)+document.body.scrollTop+document.documentElement.scrollTop-Math.floor(i.top)+1]},cursorPositionInCanvasDelta:function(e,t,r){var n=r.target.getBoundingClientRect(),i={top:n.top+document.body.scrollTop,left:n.left+document.body.scrollLeft};return[r.clientX+e+document.body.scrollLeft+document.documentElement.scrollLeft-Math.floor(i.left),r.clientY+t+document.body.scrollTop+document.documentElement.scrollTop-Math.floor(i.top)+1]},onDocumentMouseMove:function(e){this.mouse.x=this.cursorPositionInCanvas(e)[0]/e.target.getBoundingClientRect().width*2-1,this.mouse.y=-this.cursorPositionInCanvas(e)[1]/e.target.getBoundingClientRect().height*2+1,void 0!==this.hover&&this.hover.active&&this.checkSelection(e,e.clientX,e.clientY,this.hover),this.drag&&void 0!==this.pickRectangle&&this.pickRectangle.active&&(this.rect.w=this.cursorPositionInCanvas(e)[0]-this.rect.startX,this.rect.h=this.cursorPositionInCanvas(e)[1]-this.rect.startY,this.rectCtx.clearRect(0,0,this.rectCanvas.width,this.rectCanvas.height),this.drawRect())},onDocumentMouseDown:function(e){var t;this.mouse.x=this.cursorPositionInCanvas(e)[0]/e.target.getBoundingClientRect().width*2-1,this.mouse.y=-this.cursorPositionInCanvas(e)[1]/e.target.getBoundingClientRect().height*2+1;var r=e||window.event;"which"in r?t=3==r.which:"button"in r&&(t=2==r.button),t||(this.mouseDown=!0),this.mouseDownCoords.x=e.clientX,this.mouseDownCoords.y=e.clientY,void 0!==this.pick&&this.pick.active&&this.checkSelection(e,e.clientX,e.clientY,this.pick),void 0!==this.pickRectangle&&this.pickRectangle.active&&(this.rect.startX=this.cursorPositionInCanvas(e)[0],this.rect.startY=this.cursorPositionInCanvas(e)[1],this.rect.startEvent=e,this.drag=!0)},onDocumentMouseUp:function(e){var t;this.mouse.x=this.cursorPositionInCanvas(e)[0]/e.target.getBoundingClientRect().width*2-1,this.mouse.y=-this.cursorPositionInCanvas(e)[1]/e.target.getBoundingClientRect().height*2+1;var r=e||window.event;"which"in r?t=3==r.which:"button"in r&&(t=2==r.button),t||(this.mouseDown=!0),this.mouseUpCoords.x=e.clientX,this.mouseUpCoords.y=e.clientY,void 0!==this.pickRectangle&&this.pickRectangle.active&&(this.rect.finishX=this.cursorPositionInCanvas(e)[0],this.rect.finishY=this.cursorPositionInCanvas(e)[1],this.drag=!1,this.rectCtx.clearRect(0,0,this.rectCanvas.width,this.rectCanvas.height),this.checkSelection(e,e.clientX,e.clientY,this.pickRectangle))},onTouchStart:function(e){switch(e.preventDefault(),e.touches.length){case 1:this.mouse.x=this.cursorPositionInCanvas(e,!0)[0]/e.target.getBoundingClientRect().width*2-1,this.mouse.y=-this.cursorPositionInCanvas(e,!0)[1]/e.target.getBoundingClientRect().height*2+1,void 0!==this.hover&&this.hover.active&&this.checkSelection(e,e.touches[0].clientX,e.touches[0].clientY,this.hover,!0),void 0!==this.pick&&this.pick.active&&this.checkSelection(e,e.touches[0].clientX,e.touches[0].clientY,this.pick,!0),void 0!==this.pickRectangle&&this.pickRectangle.active&&(this.rect.startX=e.touches[0].pageX-this.container.offsetLeft,this.rect.startY=e.touches[0].pageY-this.container.offsetTop,this.rect.startEvent=e,this.rect.lastEvent=e,this.drag=!0)}},onTouchMove:function(e){switch(e.preventDefault(),e.touches.length){case 1:this.mouse.x=this.cursorPositionInCanvas(e,!0)[0]/e.target.getBoundingClientRect().width*2-1,this.mouse.y=-this.cursorPositionInCanvas(e,!0)[1]/e.target.getBoundingClientRect().height*2+1,this.drag&&void 0!==this.pickRectangle&&this.pickRectangle.active&&(this.rect.w=e.touches[0].pageX-this.container.offsetLeft-this.rect.startX,this.rect.h=e.touches[0].pageY-this.container.offsetTop-this.rect.startY,this.rectCtx.clearRect(0,0,this.rectCanvas.width,this.rectCanvas.height),this.rect.lastEvent=e,this.drawRect())}},onTouchEnd:function(e){if(void 0!==this.pickRectangle&&this.pickRectangle.active){var t=this.rect.lastEvent;this.rect.finishX=t.touches[0].pageX-this.container.offsetLeft,this.rect.finishY=t.touches[0].pageY-this.container.offsetTop,this.drag=!1,this.rectCtx.clearRect(0,0,this.rectCanvas.width,this.rectCanvas.height),this.checkSelection(t,t.touches[0].clientX,t.touches[0].clientY,this.pickRectangle,!0)}},findPointsObject:function(e,t){if("Points"==t.type&&e.push(t),void 0!==t.children)for(var r=0;r<t.children.length;r++){var n=t.children[r];this.findPointsObject(e,n)}},concatObjectsFromCellNums:function(e,t,r,n){if(void 0!==r&&0!==r.length&&0!==r[0]){if(void 0===n&&(n=1,r.sort(function(e,t){return e-t})),void 0!==t.nCells&&r[0]>=n&&r[0]<n+t.nCells){for(var i=!1,a=0;a<e.length;a++)if(e[a].object===t){i=!0;break}if(!i){var o=1;t.isLineSegments?o=2:t.isMesh&&(o=3),e.push({object:t,index:o*(r[0]-n)})}for(;r.length>0&&r[0]>=n&&r[0]<n+t.nCells;)r.splice(0,1);if(0===r.length)return}void 0!==t.nCells&&(n+=t.nCells);for(a=0;a<t.children.length&&void 0!==(n=this.concatObjectsFromCellNums(e,t.children[a],r,n));a++);return n}},getDataMapSourceCellValue:function(e,t,r){var n=void 0,i=1;return void 0!==e&&(e.cellType===AVS.Three.CellTypeEnum.Points?n=t:e.cellType===AVS.Three.CellTypeEnum.Lines?n=t/2:e.cellType===AVS.Three.CellTypeEnum.Triangles?n=t/3:(n=Math.floor(t/6),i=2)),e.userData.cellData.dataMapSourceValues[r][n*i]},checkSelection:function(e,t,r,n,i){for(var a=[],o=(JSON.parse(JSON.stringify(this.mouse.x))+1)/2,s=(1-JSON.parse(JSON.stringify(this.mouse.y)))/2,l=!1,c=0;c<this.scenes.length;c++){var h=this.scenes[c],u=this.getCamera(h);if(void 0!==u&&(this.mouse.x=(o-h.userData.left)/h.userData.width*2-1,this.mouse.y=1-(s-h.userData.top)/h.userData.height*2,this.mouse.x>=-1&&this.mouse.x<=1&&this.mouse.y>=-1&&this.mouse.y<=1))if(void 0!==n.isRectangle&&!0===n.isRectangle){for(var d=this.cursorPositionInCanvas(this.rect.startEvent,i),p=this.cursorPositionInCanvas(e,i),f=Math.abs(p[0]-d[0])+1,m=Math.abs(p[1]-d[1])+1,g=Math.min(Math.floor(p[0]),Math.floor(d[0])),v=Math.min(Math.floor(p[1]),Math.floor(d[1])),E=[],y=0;y<f;y++){for(var b=v,T=0;T<m;T++){if(n.depth===PickDepthEnum.Closest){var S=g+(this.height-b)*this.width,w=255*this.pixelBuffer[4*S]*255+255*this.pixelBuffer[4*S+1]+this.pixelBuffer[4*S+2];!0===this.useSecondTexture&&(w+=255*this.pixelBuffer2[4*S]*255*255*255*255+255*this.pixelBuffer2[4*S+1]*255*255*255+255*this.pixelBuffer2[4*S+2]*255*255),w>0&&-1===E.indexOf(w)&&E.push(w)}else{var C=new THREE.Vector2;C.x=(g/e.target.getBoundingClientRect().width-h.userData.left)/h.userData.width*2-1,C.y=-(b/e.target.getBoundingClientRect().height-h.userData.top)/h.userData.height*2+1,this.ray.setFromCamera(C,u);for(var R=this.ray.intersectObjects(h.children,!0),M=0;M<R.length;M++){for(var _=!1,x=0;x<a.length;x++)if(R[M].object===a[x].object){_=!0;break}_||(a=a.concat(R[M]))}}b++}g++}n.depth===PickDepthEnum.Closest&&this.concatObjectsFromCellNums(a,h,E)}else if(n.depth===PickDepthEnum.All)this.ray.setFromCamera(this.mouse,u),a=a.concat(this.ray.intersectObjects(h.children,!0));else{var L=this.cursorPositionInCanvas(e,i);S=Math.floor(L[0])+(this.height-Math.floor(L[1]))*this.width,w=255*this.pixelBuffer[4*S]*255+255*this.pixelBuffer[4*S+1]+this.pixelBuffer[4*S+2];!0===this.useSecondTexture&&(w+=255*this.pixelBuffer2[4*S]*255*255*255*255+255*this.pixelBuffer2[4*S+1]*255*255*255+255*this.pixelBuffer2[4*S+2]*255*255),this.concatObjectsFromCellNums(a,h,[w])}}if(a.length>0){if(n.highlight&&n.INTERSECTED){for(var k=0;k<n.INTERSECTED.length;k++){void 0!==(Z=n.INTERSECTED[k].object).saveMaterial&&(Z.material=Z.saveMaterial,Z.saveMaterial=void 0),void 0!==Z.saveGeometry&&(Z.geometry=Z.saveGeometry,Z.saveGeometry=void 0)}for(k=0;k<this.scenes.length;k++)this.scenes[k].highlightScene.children[0].children=[]}n.INTERSECTED=[];var D=[];for(k=0;k<a.length;k++)if(void 0!==a[k].object.userData&&!0===a[k].object.material.colorWrite&&(void 0===a[k].object.userData.pickable||!0===a[k].object.userData.pickable))if((void 0!==n.isRectangle&&!0===n.isRectangle||n.depth===PickDepthEnum.All||0==D.length)&&D.push(a[k]),n.level===PickLevelEnum.SceneNode)for(var P=a[k].object.parent,H=0;H<P.children.length;H++){for(var V=P.children[H],A=(_=!1,0);A<n.INTERSECTED.length;A++)if(n.INTERSECTED[A].object===V){_=!0;break}_||n.INTERSECTED.push({object:V})}else if(n.level===PickLevelEnum.CellSet){for(_=!1,H=0;H<n.INTERSECTED.length;H++)if(n.INTERSECTED[H].object===a[k].object){_=!0;break}_||n.INTERSECTED.push(a[k])}else{if(n.level!==PickLevelEnum.Cell)return;for(_=!1,H=0;H<n.INTERSECTED.length;H++)if(n.INTERSECTED[H].object===a[k].object){_=!0,n.INTERSECTED[H].indices.push(a[k].index);break}_||n.INTERSECTED.push({object:a[k].object,indices:[a[k].index]})}if(void 0!==n.onSelect&&(0==D.length?n.onSelect(void 0,t,r):void 0===D[0].object.cellType?null!==D[0].index&&n.onSelect(D,t,r):n.onSelect(D,t,r)),n.highlight){var N=(new THREE.Color).setHex(n.highlightHexColor);for(k=0;k<n.INTERSECTED.length;k++){var O,B=(Z=n.INTERSECTED[k].object).material.clone();if(B.opacity=1,n.level===PickLevelEnum.Cell){var I=Z.geometry;if(B.vertexColors=THREE.VertexColors,B.color=new THREE.Color(16777215),Z.isThickLineSegments){O=new THREE.InstancedBufferGeometry;var U,G=I.attributes.colorStart;if(void 0===G){U=new THREE.InstancedInterleavedBuffer(new Float32Array(I.attributes.positionStart.array.length),6,1);var j=0;for(H=0;H<U.array.length/3;H++)U.array[j++]=Z.material.color.r,U.array[j++]=Z.material.color.g,U.array[j++]=Z.material.color.b}else U=G.data.clone();j=null;var F=null,z=n.INTERSECTED[k].indices;for(H=0;H<z.length;H++){j=6*Math.floor(z[H]/6),F=2;for(A=0;A<F;A++)U.array[j++]=N.r,U.array[j++]=N.g,U.array[j++]=N.b}for(var Y in O.addAttribute("colorStart",new THREE.InterleavedBufferAttribute(U,3,0)),O.addAttribute("colorEnd",new THREE.InterleavedBufferAttribute(U,3,3)),I.attributes)"colorStart"!==Y&&"colorEnd"!==Y&&O.addAttribute(Y,I.attributes[Y])}else{O=new THREE.BufferGeometry;var W=I.attributes.color,X=null;if(void 0===W){X=new THREE.Float32BufferAttribute(I.attributes.position.array.length,3);for(j=0,H=0;H<X.array.length/3;H++)X.array[j++]=Z.material.color.r,X.array[j++]=Z.material.color.g,X.array[j++]=Z.material.color.b}else X=W.clone();for(j=null,F=null,z=n.INTERSECTED[k].indices,H=0;H<z.length;H++){Z.cellType===CellTypeEnum.Points?(j=3*z[H],F=1):Z.cellType===CellTypeEnum.Lines?(j=3*z[H],F=2):Z.cellType===CellTypeEnum.Triangles?(j=3*z[H],F=3):(j=18*Math.floor(z[H]/6),F=6);for(A=0;A<F;A++)X.array[j++]=N.r,X.array[j++]=N.g,X.array[j++]=N.b}for(var Y in O.addAttribute("color",X),I.attributes)"color"!==Y&&O.addAttribute(Y,I.attributes[Y])}}else B.vertexColors=THREE.NoColors,B.color=N,O=Z.geometry;if(void 0!==(h=this.getObjectScene(Z)).userData&&void 0!==h.userData.is3D&&!1===h.userData.is3D){var q=Z.clone();q.material=B,q.geometry=O,q.matrixAutoUpdate=!1,q.matrix.copy(Z.matrixWorld),h.highlightScene.children[0].add(q)}else Z.saveMaterial=Z.material,Z.material=B,Z.saveGeometry=Z.geometry,Z.geometry=O,l=!0}}}else{if(n.highlight){for(k=0;k<n.INTERSECTED.length;k++){var Z;void 0!==(Z=n.INTERSECTED[k].object).saveMaterial&&(Z.material=Z.saveMaterial,Z.saveMaterial=void 0),void 0!==Z.saveGeometry&&(Z.geometry=Z.saveGeometry,Z.saveGeometry=void 0),void 0!==(h=this.getObjectScene(Z)).userData&&void 0!==h.userData.is3D&&!0!==h.userData.is3D||(l=!0)}for(k=0;k<this.scenes.length;k++)this.scenes[k].highlightScene.children[0].children=[]}n.INTERSECTED=[],void 0!==n.onSelect&&n.onSelect(void 0,t,r)}!0===l?this.render():this.highlightRender()},getObjectScene:function(e){return"Scene"===e.type?e:this.getObjectScene(e.parent)}},TransformInteractor.prototype=Object.create(THREE.EventDispatcher.prototype),TransformInteractor.prototype.constructor=TransformInteractor,Object.defineProperties(TransformInteractor.prototype,{center:{get:function(){return console.warn("AVS.Three.TransformInteractor: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("AVS.Three.TransformInteractor: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("AVS.Three.TransformInteractor: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("AVS.Three.TransformInteractor: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("AVS.Three.TransformInteractor: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("AVS.Three.TransformInteractor: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("AVS.Three.TransformInteractor: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("AVS.Three.TransformInteractor: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("AVS.Three.TransformInteractor: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("AVS.Three.TransformInteractor: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("AVS.Three.TransformInteractor: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("AVS.Three.TransformInteractor: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("AVS.Three.TransformInteractor: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}});export{Viewer,TransformInteractor,REVISION,DEFAULT_VIEWER_WIDTH,DEFAULT_VIEWER_HEIGHT,RAYCASTER_LINE_PRECISION,PickDepthEnum,PickLevelEnum,CellTypeEnum};
